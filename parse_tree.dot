digraph Tree {
  1 [type="module"] [value="b'from flask_restx import Resource, fields, marshal\nimport validators\n\nfrom . import api, response_fields\nfrom .. import common\nfrom ... import models\n\ndb = models.db\n\nrelay = api.namespace(\'relay\', description=\'Relay operations\')\n\nrelay_fields = api.model(\'Relay\', {\n    \'name\': fields.String(description=\'relayed domain name\', example=\'example.com\', required=True),\n    \'smtp\': fields.String(description=\'remote host\', example=\'example.com\', required=False),\n    \'comment\': fields.String(description=\'a comment\', required=False)\n})\n\nrelay_fields_update = api.model(\'RelayUpdate\', {\n    \'smtp\': fields.String(description=\'remote host\', example=\'example.com\', required=False),\n    \'comment\': fields.String(description=\'a comment\', required=False)\n})\n\n@relay.route(\'\')\nclass Relays(Resource):\n    @relay.doc(\'list_relays\')\n    @relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self):\n        "List all relays"\n        return models.Relay.query.all()\n\n    @relay.doc(\'create_relay\')\n    @relay.expect(relay_fields)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(409, \'Duplicate relay\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def post(self):\n        """ Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200\n\n@relay.route(\'/<string:name>\')\nclass Relay(Resource):\n    @relay.doc(\'find_relay\')\n    @relay.response(200, \'Success\', relay_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self, name):\n        """ Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200\n\n    @relay.doc(\'update_relay\')\n    @relay.expect(relay_fields_update)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def patch(self, name):\n        """ Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200\n\n\n    @relay.doc(\'delete_relay\')\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def delete(self, name):\n        """ Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200\n'"];
  2 [type="import_from_statement"] [value="b'from flask_restx import Resource, fields, marshal'"];
  1 -> 2;
  4 [type="from"] [value="b'from'"];
  2 -> 4;
  6 [type="dotted_name"] [value="b'flask_restx'"];
  2 -> 6;
  8 [type="identifier"] [value="b'flask_restx'"];
  6 -> 8;
  10 [type="import"] [value="b'import'"];
  2 -> 10;
  12 [type="dotted_name"] [value="b'Resource'"];
  2 -> 12;
  14 [type="identifier"] [value="b'Resource'"];
  12 -> 14;
  16 [type=","] [value="b','"];
  2 -> 16;
  18 [type="dotted_name"] [value="b'fields'"];
  2 -> 18;
  20 [type="identifier"] [value="b'fields'"];
  18 -> 20;
  22 [type=","] [value="b','"];
  2 -> 22;
  24 [type="dotted_name"] [value="b'marshal'"];
  2 -> 24;
  26 [type="identifier"] [value="b'marshal'"];
  24 -> 26;
  28 [type="import_statement"] [value="b'import validators'"];
  1 -> 28;
  30 [type="import"] [value="b'import'"];
  28 -> 30;
  32 [type="dotted_name"] [value="b'validators'"];
  28 -> 32;
  34 [type="identifier"] [value="b'validators'"];
  32 -> 34;
  36 [type="import_from_statement"] [value="b'from . import api, response_fields'"];
  1 -> 36;
  38 [type="from"] [value="b'from'"];
  36 -> 38;
  40 [type="relative_import"] [value="b'.'"];
  36 -> 40;
  42 [type="import_prefix"] [value="b'.'"];
  40 -> 42;
  44 [type="."] [value="b'.'"];
  42 -> 44;
  46 [type="import"] [value="b'import'"];
  36 -> 46;
  48 [type="dotted_name"] [value="b'api'"];
  36 -> 48;
  50 [type="identifier"] [value="b'api'"];
  48 -> 50;
  52 [type=","] [value="b','"];
  36 -> 52;
  54 [type="dotted_name"] [value="b'response_fields'"];
  36 -> 54;
  56 [type="identifier"] [value="b'response_fields'"];
  54 -> 56;
  58 [type="import_from_statement"] [value="b'from .. import common'"];
  1 -> 58;
  60 [type="from"] [value="b'from'"];
  58 -> 60;
  62 [type="relative_import"] [value="b'..'"];
  58 -> 62;
  64 [type="import_prefix"] [value="b'..'"];
  62 -> 64;
  66 [type="."] [value="b'.'"];
  64 -> 66;
  68 [type="."] [value="b'.'"];
  64 -> 68;
  70 [type="import"] [value="b'import'"];
  58 -> 70;
  72 [type="dotted_name"] [value="b'common'"];
  58 -> 72;
  74 [type="identifier"] [value="b'common'"];
  72 -> 74;
  76 [type="import_from_statement"] [value="b'from ... import models'"];
  1 -> 76;
  78 [type="from"] [value="b'from'"];
  76 -> 78;
  80 [type="relative_import"] [value="b'...'"];
  76 -> 80;
  82 [type="import_prefix"] [value="b'...'"];
  80 -> 82;
  84 [type="."] [value="b'.'"];
  82 -> 84;
  86 [type="."] [value="b'.'"];
  82 -> 86;
  88 [type="."] [value="b'.'"];
  82 -> 88;
  90 [type="import"] [value="b'import'"];
  76 -> 90;
  92 [type="dotted_name"] [value="b'models'"];
  76 -> 92;
  94 [type="identifier"] [value="b'models'"];
  92 -> 94;
  96 [type="expression_statement"] [value="b'db = models.db'"];
  1 -> 96;
  98 [type="assignment"] [value="b'db = models.db'"];
  96 -> 98;
  100 [type="identifier"] [value="b'db'"];
  98 -> 100;
  102 [type="="] [value="b'='"];
  98 -> 102;
  104 [type="attribute"] [value="b'models.db'"];
  98 -> 104;
  106 [type="identifier"] [value="b'models'"];
  104 -> 106;
  108 [type="."] [value="b'.'"];
  104 -> 108;
  110 [type="identifier"] [value="b'db'"];
  104 -> 110;
  112 [type="expression_statement"] [value="b"relay = api.namespace('relay', description='Relay operations')""];
  1 -> 112;
  114 [type="assignment"] [value="b"relay = api.namespace('relay', description='Relay operations')""];
  112 -> 114;
  116 [type="identifier"] [value="b'relay'"];
  114 -> 116;
  118 [type="="] [value="b'='"];
  114 -> 118;
  120 [type="call"] [value="b"api.namespace('relay', description='Relay operations')""];
  114 -> 120;
  122 [type="attribute"] [value="b'api.namespace'"];
  120 -> 122;
  124 [type="identifier"] [value="b'api'"];
  122 -> 124;
  126 [type="."] [value="b'.'"];
  122 -> 126;
  128 [type="identifier"] [value="b'namespace'"];
  122 -> 128;
  130 [type="argument_list"] [value="b"('relay', description='Relay operations')""];
  120 -> 130;
  132 [type="("] [value="b'('"];
  130 -> 132;
  134 [type="string"] [value="b"'relay'""];
  130 -> 134;
  136 [type="string_start"] [value="b"'""];
  134 -> 136;
  138 [type="string_content"] [value="b'relay'"];
  134 -> 138;
  140 [type="string_end"] [value="b"'""];
  134 -> 140;
  142 [type=","] [value="b','"];
  130 -> 142;
  144 [type="keyword_argument"] [value="b"description='Relay operations'""];
  130 -> 144;
  146 [type="identifier"] [value="b'description'"];
  144 -> 146;
  148 [type="="] [value="b'='"];
  144 -> 148;
  150 [type="string"] [value="b"'Relay operations'""];
  144 -> 150;
  152 [type="string_start"] [value="b"'""];
  150 -> 152;
  154 [type="string_content"] [value="b'Relay operations'"];
  150 -> 154;
  156 [type="string_end"] [value="b"'""];
  150 -> 156;
  158 [type=")"] [value="b')'"];
  130 -> 158;
  160 [type="expression_statement"] [value="b"relay_fields = api.model('Relay', {\n    'name': fields.String(description='relayed domain name', example='example.com', required=True),\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  1 -> 160;
  162 [type="assignment"] [value="b"relay_fields = api.model('Relay', {\n    'name': fields.String(description='relayed domain name', example='example.com', required=True),\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  160 -> 162;
  164 [type="identifier"] [value="b'relay_fields'"];
  162 -> 164;
  166 [type="="] [value="b'='"];
  162 -> 166;
  168 [type="call"] [value="b"api.model('Relay', {\n    'name': fields.String(description='relayed domain name', example='example.com', required=True),\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  162 -> 168;
  170 [type="attribute"] [value="b'api.model'"];
  168 -> 170;
  172 [type="identifier"] [value="b'api'"];
  170 -> 172;
  174 [type="."] [value="b'.'"];
  170 -> 174;
  176 [type="identifier"] [value="b'model'"];
  170 -> 176;
  178 [type="argument_list"] [value="b"('Relay', {\n    'name': fields.String(description='relayed domain name', example='example.com', required=True),\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  168 -> 178;
  180 [type="("] [value="b'('"];
  178 -> 180;
  182 [type="string"] [value="b"'Relay'""];
  178 -> 182;
  184 [type="string_start"] [value="b"'""];
  182 -> 184;
  186 [type="string_content"] [value="b'Relay'"];
  182 -> 186;
  188 [type="string_end"] [value="b"'""];
  182 -> 188;
  190 [type=","] [value="b','"];
  178 -> 190;
  192 [type="dictionary"] [value="b"{\n    'name': fields.String(description='relayed domain name', example='example.com', required=True),\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n}""];
  178 -> 192;
  194 [type="{"] [value="b'{'"];
  192 -> 194;
  196 [type="pair"] [value="b"'name': fields.String(description='relayed domain name', example='example.com', required=True)""];
  192 -> 196;
  198 [type="string"] [value="b"'name'""];
  196 -> 198;
  200 [type="string_start"] [value="b"'""];
  198 -> 200;
  202 [type="string_content"] [value="b'name'"];
  198 -> 202;
  204 [type="string_end"] [value="b"'""];
  198 -> 204;
  206 [type=":"] [value="b':'"];
  196 -> 206;
  208 [type="call"] [value="b"fields.String(description='relayed domain name', example='example.com', required=True)""];
  196 -> 208;
  210 [type="attribute"] [value="b'fields.String'"];
  208 -> 210;
  212 [type="identifier"] [value="b'fields'"];
  210 -> 212;
  214 [type="."] [value="b'.'"];
  210 -> 214;
  216 [type="identifier"] [value="b'String'"];
  210 -> 216;
  218 [type="argument_list"] [value="b"(description='relayed domain name', example='example.com', required=True)""];
  208 -> 218;
  220 [type="("] [value="b'('"];
  218 -> 220;
  222 [type="keyword_argument"] [value="b"description='relayed domain name'""];
  218 -> 222;
  224 [type="identifier"] [value="b'description'"];
  222 -> 224;
  226 [type="="] [value="b'='"];
  222 -> 226;
  228 [type="string"] [value="b"'relayed domain name'""];
  222 -> 228;
  230 [type="string_start"] [value="b"'""];
  228 -> 230;
  232 [type="string_content"] [value="b'relayed domain name'"];
  228 -> 232;
  234 [type="string_end"] [value="b"'""];
  228 -> 234;
  236 [type=","] [value="b','"];
  218 -> 236;
  238 [type="keyword_argument"] [value="b"example='example.com'""];
  218 -> 238;
  240 [type="identifier"] [value="b'example'"];
  238 -> 240;
  242 [type="="] [value="b'='"];
  238 -> 242;
  244 [type="string"] [value="b"'example.com'""];
  238 -> 244;
  246 [type="string_start"] [value="b"'""];
  244 -> 246;
  248 [type="string_content"] [value="b'example.com'"];
  244 -> 248;
  250 [type="string_end"] [value="b"'""];
  244 -> 250;
  252 [type=","] [value="b','"];
  218 -> 252;
  254 [type="keyword_argument"] [value="b'required=True'"];
  218 -> 254;
  256 [type="identifier"] [value="b'required'"];
  254 -> 256;
  258 [type="="] [value="b'='"];
  254 -> 258;
  260 [type="true"] [value="b'True'"];
  254 -> 260;
  262 [type=")"] [value="b')'"];
  218 -> 262;
  264 [type=","] [value="b','"];
  192 -> 264;
  266 [type="pair"] [value="b"'smtp': fields.String(description='remote host', example='example.com', required=False)""];
  192 -> 266;
  268 [type="string"] [value="b"'smtp'""];
  266 -> 268;
  270 [type="string_start"] [value="b"'""];
  268 -> 270;
  272 [type="string_content"] [value="b'smtp'"];
  268 -> 272;
  274 [type="string_end"] [value="b"'""];
  268 -> 274;
  276 [type=":"] [value="b':'"];
  266 -> 276;
  278 [type="call"] [value="b"fields.String(description='remote host', example='example.com', required=False)""];
  266 -> 278;
  280 [type="attribute"] [value="b'fields.String'"];
  278 -> 280;
  282 [type="identifier"] [value="b'fields'"];
  280 -> 282;
  284 [type="."] [value="b'.'"];
  280 -> 284;
  286 [type="identifier"] [value="b'String'"];
  280 -> 286;
  288 [type="argument_list"] [value="b"(description='remote host', example='example.com', required=False)""];
  278 -> 288;
  290 [type="("] [value="b'('"];
  288 -> 290;
  292 [type="keyword_argument"] [value="b"description='remote host'""];
  288 -> 292;
  294 [type="identifier"] [value="b'description'"];
  292 -> 294;
  296 [type="="] [value="b'='"];
  292 -> 296;
  298 [type="string"] [value="b"'remote host'""];
  292 -> 298;
  300 [type="string_start"] [value="b"'""];
  298 -> 300;
  302 [type="string_content"] [value="b'remote host'"];
  298 -> 302;
  304 [type="string_end"] [value="b"'""];
  298 -> 304;
  306 [type=","] [value="b','"];
  288 -> 306;
  308 [type="keyword_argument"] [value="b"example='example.com'""];
  288 -> 308;
  310 [type="identifier"] [value="b'example'"];
  308 -> 310;
  312 [type="="] [value="b'='"];
  308 -> 312;
  314 [type="string"] [value="b"'example.com'""];
  308 -> 314;
  316 [type="string_start"] [value="b"'""];
  314 -> 316;
  318 [type="string_content"] [value="b'example.com'"];
  314 -> 318;
  320 [type="string_end"] [value="b"'""];
  314 -> 320;
  322 [type=","] [value="b','"];
  288 -> 322;
  324 [type="keyword_argument"] [value="b'required=False'"];
  288 -> 324;
  326 [type="identifier"] [value="b'required'"];
  324 -> 326;
  328 [type="="] [value="b'='"];
  324 -> 328;
  330 [type="false"] [value="b'False'"];
  324 -> 330;
  332 [type=")"] [value="b')'"];
  288 -> 332;
  334 [type=","] [value="b','"];
  192 -> 334;
  336 [type="pair"] [value="b"'comment': fields.String(description='a comment', required=False)""];
  192 -> 336;
  338 [type="string"] [value="b"'comment'""];
  336 -> 338;
  340 [type="string_start"] [value="b"'""];
  338 -> 340;
  342 [type="string_content"] [value="b'comment'"];
  338 -> 342;
  344 [type="string_end"] [value="b"'""];
  338 -> 344;
  346 [type=":"] [value="b':'"];
  336 -> 346;
  348 [type="call"] [value="b"fields.String(description='a comment', required=False)""];
  336 -> 348;
  350 [type="attribute"] [value="b'fields.String'"];
  348 -> 350;
  352 [type="identifier"] [value="b'fields'"];
  350 -> 352;
  354 [type="."] [value="b'.'"];
  350 -> 354;
  356 [type="identifier"] [value="b'String'"];
  350 -> 356;
  358 [type="argument_list"] [value="b"(description='a comment', required=False)""];
  348 -> 358;
  360 [type="("] [value="b'('"];
  358 -> 360;
  362 [type="keyword_argument"] [value="b"description='a comment'""];
  358 -> 362;
  364 [type="identifier"] [value="b'description'"];
  362 -> 364;
  366 [type="="] [value="b'='"];
  362 -> 366;
  368 [type="string"] [value="b"'a comment'""];
  362 -> 368;
  370 [type="string_start"] [value="b"'""];
  368 -> 370;
  372 [type="string_content"] [value="b'a comment'"];
  368 -> 372;
  374 [type="string_end"] [value="b"'""];
  368 -> 374;
  376 [type=","] [value="b','"];
  358 -> 376;
  378 [type="keyword_argument"] [value="b'required=False'"];
  358 -> 378;
  380 [type="identifier"] [value="b'required'"];
  378 -> 380;
  382 [type="="] [value="b'='"];
  378 -> 382;
  384 [type="false"] [value="b'False'"];
  378 -> 384;
  386 [type=")"] [value="b')'"];
  358 -> 386;
  388 [type="}"] [value="b'}'"];
  192 -> 388;
  390 [type=")"] [value="b')'"];
  178 -> 390;
  392 [type="expression_statement"] [value="b"relay_fields_update = api.model('RelayUpdate', {\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  1 -> 392;
  394 [type="assignment"] [value="b"relay_fields_update = api.model('RelayUpdate', {\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  392 -> 394;
  396 [type="identifier"] [value="b'relay_fields_update'"];
  394 -> 396;
  398 [type="="] [value="b'='"];
  394 -> 398;
  400 [type="call"] [value="b"api.model('RelayUpdate', {\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  394 -> 400;
  402 [type="attribute"] [value="b'api.model'"];
  400 -> 402;
  404 [type="identifier"] [value="b'api'"];
  402 -> 404;
  406 [type="."] [value="b'.'"];
  402 -> 406;
  408 [type="identifier"] [value="b'model'"];
  402 -> 408;
  410 [type="argument_list"] [value="b"('RelayUpdate', {\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n})""];
  400 -> 410;
  412 [type="("] [value="b'('"];
  410 -> 412;
  414 [type="string"] [value="b"'RelayUpdate'""];
  410 -> 414;
  416 [type="string_start"] [value="b"'""];
  414 -> 416;
  418 [type="string_content"] [value="b'RelayUpdate'"];
  414 -> 418;
  420 [type="string_end"] [value="b"'""];
  414 -> 420;
  422 [type=","] [value="b','"];
  410 -> 422;
  424 [type="dictionary"] [value="b"{\n    'smtp': fields.String(description='remote host', example='example.com', required=False),\n    'comment': fields.String(description='a comment', required=False)\n}""];
  410 -> 424;
  426 [type="{"] [value="b'{'"];
  424 -> 426;
  428 [type="pair"] [value="b"'smtp': fields.String(description='remote host', example='example.com', required=False)""];
  424 -> 428;
  430 [type="string"] [value="b"'smtp'""];
  428 -> 430;
  432 [type="string_start"] [value="b"'""];
  430 -> 432;
  434 [type="string_content"] [value="b'smtp'"];
  430 -> 434;
  436 [type="string_end"] [value="b"'""];
  430 -> 436;
  438 [type=":"] [value="b':'"];
  428 -> 438;
  440 [type="call"] [value="b"fields.String(description='remote host', example='example.com', required=False)""];
  428 -> 440;
  442 [type="attribute"] [value="b'fields.String'"];
  440 -> 442;
  444 [type="identifier"] [value="b'fields'"];
  442 -> 444;
  446 [type="."] [value="b'.'"];
  442 -> 446;
  448 [type="identifier"] [value="b'String'"];
  442 -> 448;
  450 [type="argument_list"] [value="b"(description='remote host', example='example.com', required=False)""];
  440 -> 450;
  452 [type="("] [value="b'('"];
  450 -> 452;
  454 [type="keyword_argument"] [value="b"description='remote host'""];
  450 -> 454;
  456 [type="identifier"] [value="b'description'"];
  454 -> 456;
  458 [type="="] [value="b'='"];
  454 -> 458;
  460 [type="string"] [value="b"'remote host'""];
  454 -> 460;
  462 [type="string_start"] [value="b"'""];
  460 -> 462;
  464 [type="string_content"] [value="b'remote host'"];
  460 -> 464;
  466 [type="string_end"] [value="b"'""];
  460 -> 466;
  468 [type=","] [value="b','"];
  450 -> 468;
  470 [type="keyword_argument"] [value="b"example='example.com'""];
  450 -> 470;
  472 [type="identifier"] [value="b'example'"];
  470 -> 472;
  474 [type="="] [value="b'='"];
  470 -> 474;
  476 [type="string"] [value="b"'example.com'""];
  470 -> 476;
  478 [type="string_start"] [value="b"'""];
  476 -> 478;
  480 [type="string_content"] [value="b'example.com'"];
  476 -> 480;
  482 [type="string_end"] [value="b"'""];
  476 -> 482;
  484 [type=","] [value="b','"];
  450 -> 484;
  486 [type="keyword_argument"] [value="b'required=False'"];
  450 -> 486;
  488 [type="identifier"] [value="b'required'"];
  486 -> 488;
  490 [type="="] [value="b'='"];
  486 -> 490;
  492 [type="false"] [value="b'False'"];
  486 -> 492;
  494 [type=")"] [value="b')'"];
  450 -> 494;
  496 [type=","] [value="b','"];
  424 -> 496;
  498 [type="pair"] [value="b"'comment': fields.String(description='a comment', required=False)""];
  424 -> 498;
  500 [type="string"] [value="b"'comment'""];
  498 -> 500;
  502 [type="string_start"] [value="b"'""];
  500 -> 502;
  504 [type="string_content"] [value="b'comment'"];
  500 -> 504;
  506 [type="string_end"] [value="b"'""];
  500 -> 506;
  508 [type=":"] [value="b':'"];
  498 -> 508;
  510 [type="call"] [value="b"fields.String(description='a comment', required=False)""];
  498 -> 510;
  512 [type="attribute"] [value="b'fields.String'"];
  510 -> 512;
  514 [type="identifier"] [value="b'fields'"];
  512 -> 514;
  516 [type="."] [value="b'.'"];
  512 -> 516;
  518 [type="identifier"] [value="b'String'"];
  512 -> 518;
  520 [type="argument_list"] [value="b"(description='a comment', required=False)""];
  510 -> 520;
  522 [type="("] [value="b'('"];
  520 -> 522;
  524 [type="keyword_argument"] [value="b"description='a comment'""];
  520 -> 524;
  526 [type="identifier"] [value="b'description'"];
  524 -> 526;
  528 [type="="] [value="b'='"];
  524 -> 528;
  530 [type="string"] [value="b"'a comment'""];
  524 -> 530;
  532 [type="string_start"] [value="b"'""];
  530 -> 532;
  534 [type="string_content"] [value="b'a comment'"];
  530 -> 534;
  536 [type="string_end"] [value="b"'""];
  530 -> 536;
  538 [type=","] [value="b','"];
  520 -> 538;
  540 [type="keyword_argument"] [value="b'required=False'"];
  520 -> 540;
  542 [type="identifier"] [value="b'required'"];
  540 -> 542;
  544 [type="="] [value="b'='"];
  540 -> 544;
  546 [type="false"] [value="b'False'"];
  540 -> 546;
  548 [type=")"] [value="b')'"];
  520 -> 548;
  550 [type="}"] [value="b'}'"];
  424 -> 550;
  552 [type=")"] [value="b')'"];
  410 -> 552;
  554 [type="decorated_definition"] [value="b'@relay.route(\'\')\nclass Relays(Resource):\n    @relay.doc(\'list_relays\')\n    @relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self):\n        "List all relays"\n        return models.Relay.query.all()\n\n    @relay.doc(\'create_relay\')\n    @relay.expect(relay_fields)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(409, \'Duplicate relay\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def post(self):\n        """ Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  1 -> 554;
  556 [type="decorator"] [value="b"@relay.route('')""];
  554 -> 556;
  558 [type="@"] [value="b'@'"];
  556 -> 558;
  560 [type="call"] [value="b"relay.route('')""];
  556 -> 560;
  562 [type="attribute"] [value="b'relay.route'"];
  560 -> 562;
  564 [type="identifier"] [value="b'relay'"];
  562 -> 564;
  566 [type="."] [value="b'.'"];
  562 -> 566;
  568 [type="identifier"] [value="b'route'"];
  562 -> 568;
  570 [type="argument_list"] [value="b"('')""];
  560 -> 570;
  572 [type="("] [value="b'('"];
  570 -> 572;
  574 [type="string"] [value="b"''""];
  570 -> 574;
  576 [type="string_start"] [value="b"'""];
  574 -> 576;
  578 [type="string_end"] [value="b"'""];
  574 -> 578;
  580 [type=")"] [value="b')'"];
  570 -> 580;
  582 [type="class_definition"] [value="b'class Relays(Resource):\n    @relay.doc(\'list_relays\')\n    @relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self):\n        "List all relays"\n        return models.Relay.query.all()\n\n    @relay.doc(\'create_relay\')\n    @relay.expect(relay_fields)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(409, \'Duplicate relay\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def post(self):\n        """ Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  554 -> 582;
  584 [type="class"] [value="b'class'"];
  582 -> 584;
  586 [type="identifier"] [value="b'Relays'"];
  582 -> 586;
  588 [type="argument_list"] [value="b'(Resource)'"];
  582 -> 588;
  590 [type="("] [value="b'('"];
  588 -> 590;
  592 [type="identifier"] [value="b'Resource'"];
  588 -> 592;
  594 [type=")"] [value="b')'"];
  588 -> 594;
  596 [type=":"] [value="b':'"];
  582 -> 596;
  598 [type="block"] [value="b'@relay.doc(\'list_relays\')\n    @relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self):\n        "List all relays"\n        return models.Relay.query.all()\n\n    @relay.doc(\'create_relay\')\n    @relay.expect(relay_fields)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(409, \'Duplicate relay\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def post(self):\n        """ Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  582 -> 598;
  600 [type="decorated_definition"] [value="b'@relay.doc(\'list_relays\')\n    @relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self):\n        "List all relays"\n        return models.Relay.query.all()'"];
  598 -> 600;
  602 [type="decorator"] [value="b"@relay.doc('list_relays')""];
  600 -> 602;
  604 [type="@"] [value="b'@'"];
  602 -> 604;
  606 [type="call"] [value="b"relay.doc('list_relays')""];
  602 -> 606;
  608 [type="attribute"] [value="b'relay.doc'"];
  606 -> 608;
  610 [type="identifier"] [value="b'relay'"];
  608 -> 610;
  612 [type="."] [value="b'.'"];
  608 -> 612;
  614 [type="identifier"] [value="b'doc'"];
  608 -> 614;
  616 [type="argument_list"] [value="b"('list_relays')""];
  606 -> 616;
  618 [type="("] [value="b'('"];
  616 -> 618;
  620 [type="string"] [value="b"'list_relays'""];
  616 -> 620;
  622 [type="string_start"] [value="b"'""];
  620 -> 622;
  624 [type="string_content"] [value="b'list_relays'"];
  620 -> 624;
  626 [type="string_end"] [value="b"'""];
  620 -> 626;
  628 [type=")"] [value="b')'"];
  616 -> 628;
  630 [type="decorator"] [value="b'@relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)'"];
  600 -> 630;
  632 [type="@"] [value="b'@'"];
  630 -> 632;
  634 [type="call"] [value="b'relay.marshal_with(relay_fields, as_list=True, skip_none=True, mask=None)'"];
  630 -> 634;
  636 [type="attribute"] [value="b'relay.marshal_with'"];
  634 -> 636;
  638 [type="identifier"] [value="b'relay'"];
  636 -> 638;
  640 [type="."] [value="b'.'"];
  636 -> 640;
  642 [type="identifier"] [value="b'marshal_with'"];
  636 -> 642;
  644 [type="argument_list"] [value="b'(relay_fields, as_list=True, skip_none=True, mask=None)'"];
  634 -> 644;
  646 [type="("] [value="b'('"];
  644 -> 646;
  648 [type="identifier"] [value="b'relay_fields'"];
  644 -> 648;
  650 [type=","] [value="b','"];
  644 -> 650;
  652 [type="keyword_argument"] [value="b'as_list=True'"];
  644 -> 652;
  654 [type="identifier"] [value="b'as_list'"];
  652 -> 654;
  656 [type="="] [value="b'='"];
  652 -> 656;
  658 [type="true"] [value="b'True'"];
  652 -> 658;
  660 [type=","] [value="b','"];
  644 -> 660;
  662 [type="keyword_argument"] [value="b'skip_none=True'"];
  644 -> 662;
  664 [type="identifier"] [value="b'skip_none'"];
  662 -> 664;
  666 [type="="] [value="b'='"];
  662 -> 666;
  668 [type="true"] [value="b'True'"];
  662 -> 668;
  670 [type=","] [value="b','"];
  644 -> 670;
  672 [type="keyword_argument"] [value="b'mask=None'"];
  644 -> 672;
  674 [type="identifier"] [value="b'mask'"];
  672 -> 674;
  676 [type="="] [value="b'='"];
  672 -> 676;
  678 [type="none"] [value="b'None'"];
  672 -> 678;
  680 [type=")"] [value="b')'"];
  644 -> 680;
  682 [type="decorator"] [value="b"@relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  600 -> 682;
  684 [type="@"] [value="b'@'"];
  682 -> 684;
  686 [type="call"] [value="b"relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  682 -> 686;
  688 [type="attribute"] [value="b'relay.doc'"];
  686 -> 688;
  690 [type="identifier"] [value="b'relay'"];
  688 -> 690;
  692 [type="."] [value="b'.'"];
  688 -> 692;
  694 [type="identifier"] [value="b'doc'"];
  688 -> 694;
  696 [type="argument_list"] [value="b"(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  686 -> 696;
  698 [type="("] [value="b'('"];
  696 -> 698;
  700 [type="keyword_argument"] [value="b"responses={401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  696 -> 700;
  702 [type="identifier"] [value="b'responses'"];
  700 -> 702;
  704 [type="="] [value="b'='"];
  700 -> 704;
  706 [type="dictionary"] [value="b"{401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  700 -> 706;
  708 [type="{"] [value="b'{'"];
  706 -> 708;
  710 [type="pair"] [value="b"401: 'Authorization header missing'""];
  706 -> 710;
  712 [type="integer"] [value="b'401'"];
  710 -> 712;
  714 [type=":"] [value="b':'"];
  710 -> 714;
  716 [type="string"] [value="b"'Authorization header missing'""];
  710 -> 716;
  718 [type="string_start"] [value="b"'""];
  716 -> 718;
  720 [type="string_content"] [value="b'Authorization header missing'"];
  716 -> 720;
  722 [type="string_end"] [value="b"'""];
  716 -> 722;
  724 [type=","] [value="b','"];
  706 -> 724;
  726 [type="pair"] [value="b"403: 'Invalid authorization header'""];
  706 -> 726;
  728 [type="integer"] [value="b'403'"];
  726 -> 728;
  730 [type=":"] [value="b':'"];
  726 -> 730;
  732 [type="string"] [value="b"'Invalid authorization header'""];
  726 -> 732;
  734 [type="string_start"] [value="b"'""];
  732 -> 734;
  736 [type="string_content"] [value="b'Invalid authorization header'"];
  732 -> 736;
  738 [type="string_end"] [value="b"'""];
  732 -> 738;
  740 [type="}"] [value="b'}'"];
  706 -> 740;
  742 [type=")"] [value="b')'"];
  696 -> 742;
  744 [type="decorator"] [value="b"@relay.doc(security='Bearer')""];
  600 -> 744;
  746 [type="@"] [value="b'@'"];
  744 -> 746;
  748 [type="call"] [value="b"relay.doc(security='Bearer')""];
  744 -> 748;
  750 [type="attribute"] [value="b'relay.doc'"];
  748 -> 750;
  752 [type="identifier"] [value="b'relay'"];
  750 -> 752;
  754 [type="."] [value="b'.'"];
  750 -> 754;
  756 [type="identifier"] [value="b'doc'"];
  750 -> 756;
  758 [type="argument_list"] [value="b"(security='Bearer')""];
  748 -> 758;
  760 [type="("] [value="b'('"];
  758 -> 760;
  762 [type="keyword_argument"] [value="b"security='Bearer'""];
  758 -> 762;
  764 [type="identifier"] [value="b'security'"];
  762 -> 764;
  766 [type="="] [value="b'='"];
  762 -> 766;
  768 [type="string"] [value="b"'Bearer'""];
  762 -> 768;
  770 [type="string_start"] [value="b"'""];
  768 -> 770;
  772 [type="string_content"] [value="b'Bearer'"];
  768 -> 772;
  774 [type="string_end"] [value="b"'""];
  768 -> 774;
  776 [type=")"] [value="b')'"];
  758 -> 776;
  778 [type="decorator"] [value="b'@common.api_token_authorization'"];
  600 -> 778;
  780 [type="@"] [value="b'@'"];
  778 -> 780;
  782 [type="attribute"] [value="b'common.api_token_authorization'"];
  778 -> 782;
  784 [type="identifier"] [value="b'common'"];
  782 -> 784;
  786 [type="."] [value="b'.'"];
  782 -> 786;
  788 [type="identifier"] [value="b'api_token_authorization'"];
  782 -> 788;
  790 [type="function_definition"] [value="b'def get(self):\n        "List all relays"\n        return models.Relay.query.all()'"];
  600 -> 790;
  792 [type="def"] [value="b'def'"];
  790 -> 792;
  794 [type="identifier"] [value="b'get'"];
  790 -> 794;
  796 [type="parameters"] [value="b'(self)'"];
  790 -> 796;
  798 [type="("] [value="b'('"];
  796 -> 798;
  800 [type="identifier"] [value="b'self'"];
  796 -> 800;
  802 [type=")"] [value="b')'"];
  796 -> 802;
  804 [type=":"] [value="b':'"];
  790 -> 804;
  806 [type="block"] [value="b'"List all relays"\n        return models.Relay.query.all()'"];
  790 -> 806;
  808 [type="expression_statement"] [value="b'"List all relays"'"];
  806 -> 808;
  810 [type="string"] [value="b'"List all relays"'"];
  808 -> 810;
  812 [type="string_start"] [value="b'"'"];
  810 -> 812;
  814 [type="string_content"] [value="b'List all relays'"];
  810 -> 814;
  816 [type="string_end"] [value="b'"'"];
  810 -> 816;
  818 [type="return_statement"] [value="b'return models.Relay.query.all()'"];
  806 -> 818;
  820 [type="return"] [value="b'return'"];
  818 -> 820;
  822 [type="call"] [value="b'models.Relay.query.all()'"];
  818 -> 822;
  824 [type="attribute"] [value="b'models.Relay.query.all'"];
  822 -> 824;
  826 [type="attribute"] [value="b'models.Relay.query'"];
  824 -> 826;
  828 [type="attribute"] [value="b'models.Relay'"];
  826 -> 828;
  830 [type="identifier"] [value="b'models'"];
  828 -> 830;
  832 [type="."] [value="b'.'"];
  828 -> 832;
  834 [type="identifier"] [value="b'Relay'"];
  828 -> 834;
  836 [type="."] [value="b'.'"];
  826 -> 836;
  838 [type="identifier"] [value="b'query'"];
  826 -> 838;
  840 [type="."] [value="b'.'"];
  824 -> 840;
  842 [type="identifier"] [value="b'all'"];
  824 -> 842;
  844 [type="argument_list"] [value="b'()'"];
  822 -> 844;
  846 [type="("] [value="b'('"];
  844 -> 846;
  848 [type=")"] [value="b')'"];
  844 -> 848;
  850 [type="decorated_definition"] [value="b'@relay.doc(\'create_relay\')\n    @relay.expect(relay_fields)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(409, \'Duplicate relay\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def post(self):\n        """ Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  598 -> 850;
  852 [type="decorator"] [value="b"@relay.doc('create_relay')""];
  850 -> 852;
  854 [type="@"] [value="b'@'"];
  852 -> 854;
  856 [type="call"] [value="b"relay.doc('create_relay')""];
  852 -> 856;
  858 [type="attribute"] [value="b'relay.doc'"];
  856 -> 858;
  860 [type="identifier"] [value="b'relay'"];
  858 -> 860;
  862 [type="."] [value="b'.'"];
  858 -> 862;
  864 [type="identifier"] [value="b'doc'"];
  858 -> 864;
  866 [type="argument_list"] [value="b"('create_relay')""];
  856 -> 866;
  868 [type="("] [value="b'('"];
  866 -> 868;
  870 [type="string"] [value="b"'create_relay'""];
  866 -> 870;
  872 [type="string_start"] [value="b"'""];
  870 -> 872;
  874 [type="string_content"] [value="b'create_relay'"];
  870 -> 874;
  876 [type="string_end"] [value="b"'""];
  870 -> 876;
  878 [type=")"] [value="b')'"];
  866 -> 878;
  880 [type="decorator"] [value="b'@relay.expect(relay_fields)'"];
  850 -> 880;
  882 [type="@"] [value="b'@'"];
  880 -> 882;
  884 [type="call"] [value="b'relay.expect(relay_fields)'"];
  880 -> 884;
  886 [type="attribute"] [value="b'relay.expect'"];
  884 -> 886;
  888 [type="identifier"] [value="b'relay'"];
  886 -> 888;
  890 [type="."] [value="b'.'"];
  886 -> 890;
  892 [type="identifier"] [value="b'expect'"];
  886 -> 892;
  894 [type="argument_list"] [value="b'(relay_fields)'"];
  884 -> 894;
  896 [type="("] [value="b'('"];
  894 -> 896;
  898 [type="identifier"] [value="b'relay_fields'"];
  894 -> 898;
  900 [type=")"] [value="b')'"];
  894 -> 900;
  902 [type="decorator"] [value="b"@relay.response(200, 'Success', response_fields)""];
  850 -> 902;
  904 [type="@"] [value="b'@'"];
  902 -> 904;
  906 [type="call"] [value="b"relay.response(200, 'Success', response_fields)""];
  902 -> 906;
  908 [type="attribute"] [value="b'relay.response'"];
  906 -> 908;
  910 [type="identifier"] [value="b'relay'"];
  908 -> 910;
  912 [type="."] [value="b'.'"];
  908 -> 912;
  914 [type="identifier"] [value="b'response'"];
  908 -> 914;
  916 [type="argument_list"] [value="b"(200, 'Success', response_fields)""];
  906 -> 916;
  918 [type="("] [value="b'('"];
  916 -> 918;
  920 [type="integer"] [value="b'200'"];
  916 -> 920;
  922 [type=","] [value="b','"];
  916 -> 922;
  924 [type="string"] [value="b"'Success'""];
  916 -> 924;
  926 [type="string_start"] [value="b"'""];
  924 -> 926;
  928 [type="string_content"] [value="b'Success'"];
  924 -> 928;
  930 [type="string_end"] [value="b"'""];
  924 -> 930;
  932 [type=","] [value="b','"];
  916 -> 932;
  934 [type="identifier"] [value="b'response_fields'"];
  916 -> 934;
  936 [type=")"] [value="b')'"];
  916 -> 936;
  938 [type="decorator"] [value="b"@relay.response(400, 'Input validation exception', response_fields)""];
  850 -> 938;
  940 [type="@"] [value="b'@'"];
  938 -> 940;
  942 [type="call"] [value="b"relay.response(400, 'Input validation exception', response_fields)""];
  938 -> 942;
  944 [type="attribute"] [value="b'relay.response'"];
  942 -> 944;
  946 [type="identifier"] [value="b'relay'"];
  944 -> 946;
  948 [type="."] [value="b'.'"];
  944 -> 948;
  950 [type="identifier"] [value="b'response'"];
  944 -> 950;
  952 [type="argument_list"] [value="b"(400, 'Input validation exception', response_fields)""];
  942 -> 952;
  954 [type="("] [value="b'('"];
  952 -> 954;
  956 [type="integer"] [value="b'400'"];
  952 -> 956;
  958 [type=","] [value="b','"];
  952 -> 958;
  960 [type="string"] [value="b"'Input validation exception'""];
  952 -> 960;
  962 [type="string_start"] [value="b"'""];
  960 -> 962;
  964 [type="string_content"] [value="b'Input validation exception'"];
  960 -> 964;
  966 [type="string_end"] [value="b"'""];
  960 -> 966;
  968 [type=","] [value="b','"];
  952 -> 968;
  970 [type="identifier"] [value="b'response_fields'"];
  952 -> 970;
  972 [type=")"] [value="b')'"];
  952 -> 972;
  974 [type="decorator"] [value="b"@relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  850 -> 974;
  976 [type="@"] [value="b'@'"];
  974 -> 976;
  978 [type="call"] [value="b"relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  974 -> 978;
  980 [type="attribute"] [value="b'relay.doc'"];
  978 -> 980;
  982 [type="identifier"] [value="b'relay'"];
  980 -> 982;
  984 [type="."] [value="b'.'"];
  980 -> 984;
  986 [type="identifier"] [value="b'doc'"];
  980 -> 986;
  988 [type="argument_list"] [value="b"(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  978 -> 988;
  990 [type="("] [value="b'('"];
  988 -> 990;
  992 [type="keyword_argument"] [value="b"responses={401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  988 -> 992;
  994 [type="identifier"] [value="b'responses'"];
  992 -> 994;
  996 [type="="] [value="b'='"];
  992 -> 996;
  998 [type="dictionary"] [value="b"{401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  992 -> 998;
  1000 [type="{"] [value="b'{'"];
  998 -> 1000;
  1002 [type="pair"] [value="b"401: 'Authorization header missing'""];
  998 -> 1002;
  1004 [type="integer"] [value="b'401'"];
  1002 -> 1004;
  1006 [type=":"] [value="b':'"];
  1002 -> 1006;
  1008 [type="string"] [value="b"'Authorization header missing'""];
  1002 -> 1008;
  1010 [type="string_start"] [value="b"'""];
  1008 -> 1010;
  1012 [type="string_content"] [value="b'Authorization header missing'"];
  1008 -> 1012;
  1014 [type="string_end"] [value="b"'""];
  1008 -> 1014;
  1016 [type=","] [value="b','"];
  998 -> 1016;
  1018 [type="pair"] [value="b"403: 'Invalid authorization header'""];
  998 -> 1018;
  1020 [type="integer"] [value="b'403'"];
  1018 -> 1020;
  1022 [type=":"] [value="b':'"];
  1018 -> 1022;
  1024 [type="string"] [value="b"'Invalid authorization header'""];
  1018 -> 1024;
  1026 [type="string_start"] [value="b"'""];
  1024 -> 1026;
  1028 [type="string_content"] [value="b'Invalid authorization header'"];
  1024 -> 1028;
  1030 [type="string_end"] [value="b"'""];
  1024 -> 1030;
  1032 [type="}"] [value="b'}'"];
  998 -> 1032;
  1034 [type=")"] [value="b')'"];
  988 -> 1034;
  1036 [type="decorator"] [value="b"@relay.response(409, 'Duplicate relay', response_fields)""];
  850 -> 1036;
  1038 [type="@"] [value="b'@'"];
  1036 -> 1038;
  1040 [type="call"] [value="b"relay.response(409, 'Duplicate relay', response_fields)""];
  1036 -> 1040;
  1042 [type="attribute"] [value="b'relay.response'"];
  1040 -> 1042;
  1044 [type="identifier"] [value="b'relay'"];
  1042 -> 1044;
  1046 [type="."] [value="b'.'"];
  1042 -> 1046;
  1048 [type="identifier"] [value="b'response'"];
  1042 -> 1048;
  1050 [type="argument_list"] [value="b"(409, 'Duplicate relay', response_fields)""];
  1040 -> 1050;
  1052 [type="("] [value="b'('"];
  1050 -> 1052;
  1054 [type="integer"] [value="b'409'"];
  1050 -> 1054;
  1056 [type=","] [value="b','"];
  1050 -> 1056;
  1058 [type="string"] [value="b"'Duplicate relay'""];
  1050 -> 1058;
  1060 [type="string_start"] [value="b"'""];
  1058 -> 1060;
  1062 [type="string_content"] [value="b'Duplicate relay'"];
  1058 -> 1062;
  1064 [type="string_end"] [value="b"'""];
  1058 -> 1064;
  1066 [type=","] [value="b','"];
  1050 -> 1066;
  1068 [type="identifier"] [value="b'response_fields'"];
  1050 -> 1068;
  1070 [type=")"] [value="b')'"];
  1050 -> 1070;
  1072 [type="decorator"] [value="b"@relay.doc(security='Bearer')""];
  850 -> 1072;
  1074 [type="@"] [value="b'@'"];
  1072 -> 1074;
  1076 [type="call"] [value="b"relay.doc(security='Bearer')""];
  1072 -> 1076;
  1078 [type="attribute"] [value="b'relay.doc'"];
  1076 -> 1078;
  1080 [type="identifier"] [value="b'relay'"];
  1078 -> 1080;
  1082 [type="."] [value="b'.'"];
  1078 -> 1082;
  1084 [type="identifier"] [value="b'doc'"];
  1078 -> 1084;
  1086 [type="argument_list"] [value="b"(security='Bearer')""];
  1076 -> 1086;
  1088 [type="("] [value="b'('"];
  1086 -> 1088;
  1090 [type="keyword_argument"] [value="b"security='Bearer'""];
  1086 -> 1090;
  1092 [type="identifier"] [value="b'security'"];
  1090 -> 1092;
  1094 [type="="] [value="b'='"];
  1090 -> 1094;
  1096 [type="string"] [value="b"'Bearer'""];
  1090 -> 1096;
  1098 [type="string_start"] [value="b"'""];
  1096 -> 1098;
  1100 [type="string_content"] [value="b'Bearer'"];
  1096 -> 1100;
  1102 [type="string_end"] [value="b"'""];
  1096 -> 1102;
  1104 [type=")"] [value="b')'"];
  1086 -> 1104;
  1106 [type="decorator"] [value="b'@common.api_token_authorization'"];
  850 -> 1106;
  1108 [type="@"] [value="b'@'"];
  1106 -> 1108;
  1110 [type="attribute"] [value="b'common.api_token_authorization'"];
  1106 -> 1110;
  1112 [type="identifier"] [value="b'common'"];
  1110 -> 1112;
  1114 [type="."] [value="b'.'"];
  1110 -> 1114;
  1116 [type="identifier"] [value="b'api_token_authorization'"];
  1110 -> 1116;
  1118 [type="function_definition"] [value="b'def post(self):\n        """ Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  850 -> 1118;
  1120 [type="def"] [value="b'def'"];
  1118 -> 1120;
  1122 [type="identifier"] [value="b'post'"];
  1118 -> 1122;
  1124 [type="parameters"] [value="b'(self)'"];
  1118 -> 1124;
  1126 [type="("] [value="b'('"];
  1124 -> 1126;
  1128 [type="identifier"] [value="b'self'"];
  1124 -> 1128;
  1130 [type=")"] [value="b')'"];
  1124 -> 1130;
  1132 [type=":"] [value="b':'"];
  1118 -> 1132;
  1134 [type="block"] [value="b'""" Create a new relay """\n        data = api.payload\n\n        if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400\n\n        if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409\n        relay_model = models.Relay(name=data[\'name\'])\n        if \'smtp\' in data:\n            relay_model.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_model.comment = data[\'comment\']\n        db.session.add(relay_model)\n        db.session.commit()\n        return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  1118 -> 1134;
  1136 [type="expression_statement"] [value="b'""" Create a new relay """'"];
  1134 -> 1136;
  1138 [type="string"] [value="b'""" Create a new relay """'"];
  1136 -> 1138;
  1140 [type="string_start"] [value="b'"""'"];
  1138 -> 1140;
  1142 [type="string_content"] [value="b' Create a new relay '"];
  1138 -> 1142;
  1144 [type="string_end"] [value="b'"""'"];
  1138 -> 1144;
  1146 [type="expression_statement"] [value="b'data = api.payload'"];
  1134 -> 1146;
  1148 [type="assignment"] [value="b'data = api.payload'"];
  1146 -> 1148;
  1150 [type="identifier"] [value="b'data'"];
  1148 -> 1150;
  1152 [type="="] [value="b'='"];
  1148 -> 1152;
  1154 [type="attribute"] [value="b'api.payload'"];
  1148 -> 1154;
  1156 [type="identifier"] [value="b'api'"];
  1154 -> 1156;
  1158 [type="."] [value="b'.'"];
  1154 -> 1158;
  1160 [type="identifier"] [value="b'payload'"];
  1154 -> 1160;
  1162 [type="if_statement"] [value="b'if not validators.domain(data[\'name\']):\n            return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400'"];
  1134 -> 1162;
  1164 [type="if"] [value="b'if'"];
  1162 -> 1164;
  1166 [type="not_operator"] [value="b"not validators.domain(data['name'])""];
  1162 -> 1166;
  1168 [type="not"] [value="b'not'"];
  1166 -> 1168;
  1170 [type="call"] [value="b"validators.domain(data['name'])""];
  1166 -> 1170;
  1172 [type="attribute"] [value="b'validators.domain'"];
  1170 -> 1172;
  1174 [type="identifier"] [value="b'validators'"];
  1172 -> 1174;
  1176 [type="."] [value="b'.'"];
  1172 -> 1176;
  1178 [type="identifier"] [value="b'domain'"];
  1172 -> 1178;
  1180 [type="argument_list"] [value="b"(data['name'])""];
  1170 -> 1180;
  1182 [type="("] [value="b'('"];
  1180 -> 1182;
  1184 [type="subscript"] [value="b"data['name']""];
  1180 -> 1184;
  1186 [type="identifier"] [value="b'data'"];
  1184 -> 1186;
  1188 [type="["] [value="b'['"];
  1184 -> 1188;
  1190 [type="string"] [value="b"'name'""];
  1184 -> 1190;
  1192 [type="string_start"] [value="b"'""];
  1190 -> 1192;
  1194 [type="string_content"] [value="b'name'"];
  1190 -> 1194;
  1196 [type="string_end"] [value="b"'""];
  1190 -> 1196;
  1198 [type="]"] [value="b']'"];
  1184 -> 1198;
  1200 [type=")"] [value="b')'"];
  1180 -> 1200;
  1202 [type=":"] [value="b':'"];
  1162 -> 1202;
  1204 [type="block"] [value="b'return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400'"];
  1162 -> 1204;
  1206 [type="return_statement"] [value="b'return { \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400'"];
  1204 -> 1206;
  1208 [type="return"] [value="b'return'"];
  1206 -> 1208;
  1210 [type="expression_list"] [value="b'{ \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}, 400'"];
  1206 -> 1210;
  1212 [type="dictionary"] [value="b'{ \'code\': 400, \'message\': f\'Relayed domain {data["name"]} is not a valid domain\'}'"];
  1210 -> 1212;
  1214 [type="{"] [value="b'{'"];
  1212 -> 1214;
  1216 [type="pair"] [value="b"'code': 400""];
  1212 -> 1216;
  1218 [type="string"] [value="b"'code'""];
  1216 -> 1218;
  1220 [type="string_start"] [value="b"'""];
  1218 -> 1220;
  1222 [type="string_content"] [value="b'code'"];
  1218 -> 1222;
  1224 [type="string_end"] [value="b"'""];
  1218 -> 1224;
  1226 [type=":"] [value="b':'"];
  1216 -> 1226;
  1228 [type="integer"] [value="b'400'"];
  1216 -> 1228;
  1230 [type=","] [value="b','"];
  1212 -> 1230;
  1232 [type="pair"] [value="b'\'message\': f\'Relayed domain {data["name"]} is not a valid domain\''"];
  1212 -> 1232;
  1234 [type="string"] [value="b"'message'""];
  1232 -> 1234;
  1236 [type="string_start"] [value="b"'""];
  1234 -> 1236;
  1238 [type="string_content"] [value="b'message'"];
  1234 -> 1238;
  1240 [type="string_end"] [value="b"'""];
  1234 -> 1240;
  1242 [type=":"] [value="b':'"];
  1232 -> 1242;
  1244 [type="string"] [value="b'f\'Relayed domain {data["name"]} is not a valid domain\''"];
  1232 -> 1244;
  1246 [type="string_start"] [value="b"f'""];
  1244 -> 1246;
  1248 [type="string_content"] [value="b'Relayed domain '"];
  1244 -> 1248;
  1250 [type="interpolation"] [value="b'{data["name"]}'"];
  1244 -> 1250;
  1252 [type="{"] [value="b'{'"];
  1250 -> 1252;
  1254 [type="subscript"] [value="b'data["name"]'"];
  1250 -> 1254;
  1256 [type="identifier"] [value="b'data'"];
  1254 -> 1256;
  1258 [type="["] [value="b'['"];
  1254 -> 1258;
  1260 [type="string"] [value="b'"name"'"];
  1254 -> 1260;
  1262 [type="string_start"] [value="b'"'"];
  1260 -> 1262;
  1264 [type="string_content"] [value="b'name'"];
  1260 -> 1264;
  1266 [type="string_end"] [value="b'"'"];
  1260 -> 1266;
  1268 [type="]"] [value="b']'"];
  1254 -> 1268;
  1270 [type="}"] [value="b'}'"];
  1250 -> 1270;
  1272 [type="string_content"] [value="b' is not a valid domain'"];
  1244 -> 1272;
  1274 [type="string_end"] [value="b"'""];
  1244 -> 1274;
  1276 [type="}"] [value="b'}'"];
  1212 -> 1276;
  1278 [type=","] [value="b','"];
  1210 -> 1278;
  1280 [type="integer"] [value="b'400'"];
  1210 -> 1280;
  1282 [type="if_statement"] [value="b'if common.fqdn_in_use(data[\'name\']):\n            return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409'"];
  1134 -> 1282;
  1284 [type="if"] [value="b'if'"];
  1282 -> 1284;
  1286 [type="call"] [value="b"common.fqdn_in_use(data['name'])""];
  1282 -> 1286;
  1288 [type="attribute"] [value="b'common.fqdn_in_use'"];
  1286 -> 1288;
  1290 [type="identifier"] [value="b'common'"];
  1288 -> 1290;
  1292 [type="."] [value="b'.'"];
  1288 -> 1292;
  1294 [type="identifier"] [value="b'fqdn_in_use'"];
  1288 -> 1294;
  1296 [type="argument_list"] [value="b"(data['name'])""];
  1286 -> 1296;
  1298 [type="("] [value="b'('"];
  1296 -> 1298;
  1300 [type="subscript"] [value="b"data['name']""];
  1296 -> 1300;
  1302 [type="identifier"] [value="b'data'"];
  1300 -> 1302;
  1304 [type="["] [value="b'['"];
  1300 -> 1304;
  1306 [type="string"] [value="b"'name'""];
  1300 -> 1306;
  1308 [type="string_start"] [value="b"'""];
  1306 -> 1308;
  1310 [type="string_content"] [value="b'name'"];
  1306 -> 1310;
  1312 [type="string_end"] [value="b"'""];
  1306 -> 1312;
  1314 [type="]"] [value="b']'"];
  1300 -> 1314;
  1316 [type=")"] [value="b')'"];
  1296 -> 1316;
  1318 [type=":"] [value="b':'"];
  1282 -> 1318;
  1320 [type="block"] [value="b'return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409'"];
  1282 -> 1320;
  1322 [type="return_statement"] [value="b'return { \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409'"];
  1320 -> 1322;
  1324 [type="return"] [value="b'return'"];
  1322 -> 1324;
  1326 [type="expression_list"] [value="b'{ \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}, 409'"];
  1322 -> 1326;
  1328 [type="dictionary"] [value="b'{ \'code\': 409, \'message\': f\'Duplicate domain {data["name"]}\'}'"];
  1326 -> 1328;
  1330 [type="{"] [value="b'{'"];
  1328 -> 1330;
  1332 [type="pair"] [value="b"'code': 409""];
  1328 -> 1332;
  1334 [type="string"] [value="b"'code'""];
  1332 -> 1334;
  1336 [type="string_start"] [value="b"'""];
  1334 -> 1336;
  1338 [type="string_content"] [value="b'code'"];
  1334 -> 1338;
  1340 [type="string_end"] [value="b"'""];
  1334 -> 1340;
  1342 [type=":"] [value="b':'"];
  1332 -> 1342;
  1344 [type="integer"] [value="b'409'"];
  1332 -> 1344;
  1346 [type=","] [value="b','"];
  1328 -> 1346;
  1348 [type="pair"] [value="b'\'message\': f\'Duplicate domain {data["name"]}\''"];
  1328 -> 1348;
  1350 [type="string"] [value="b"'message'""];
  1348 -> 1350;
  1352 [type="string_start"] [value="b"'""];
  1350 -> 1352;
  1354 [type="string_content"] [value="b'message'"];
  1350 -> 1354;
  1356 [type="string_end"] [value="b"'""];
  1350 -> 1356;
  1358 [type=":"] [value="b':'"];
  1348 -> 1358;
  1360 [type="string"] [value="b'f\'Duplicate domain {data["name"]}\''"];
  1348 -> 1360;
  1362 [type="string_start"] [value="b"f'""];
  1360 -> 1362;
  1364 [type="string_content"] [value="b'Duplicate domain '"];
  1360 -> 1364;
  1366 [type="interpolation"] [value="b'{data["name"]}'"];
  1360 -> 1366;
  1368 [type="{"] [value="b'{'"];
  1366 -> 1368;
  1370 [type="subscript"] [value="b'data["name"]'"];
  1366 -> 1370;
  1372 [type="identifier"] [value="b'data'"];
  1370 -> 1372;
  1374 [type="["] [value="b'['"];
  1370 -> 1374;
  1376 [type="string"] [value="b'"name"'"];
  1370 -> 1376;
  1378 [type="string_start"] [value="b'"'"];
  1376 -> 1378;
  1380 [type="string_content"] [value="b'name'"];
  1376 -> 1380;
  1382 [type="string_end"] [value="b'"'"];
  1376 -> 1382;
  1384 [type="]"] [value="b']'"];
  1370 -> 1384;
  1386 [type="}"] [value="b'}'"];
  1366 -> 1386;
  1388 [type="string_end"] [value="b"'""];
  1360 -> 1388;
  1390 [type="}"] [value="b'}'"];
  1328 -> 1390;
  1392 [type=","] [value="b','"];
  1326 -> 1392;
  1394 [type="integer"] [value="b'409'"];
  1326 -> 1394;
  1396 [type="expression_statement"] [value="b"relay_model = models.Relay(name=data['name'])""];
  1134 -> 1396;
  1398 [type="assignment"] [value="b"relay_model = models.Relay(name=data['name'])""];
  1396 -> 1398;
  1400 [type="identifier"] [value="b'relay_model'"];
  1398 -> 1400;
  1402 [type="="] [value="b'='"];
  1398 -> 1402;
  1404 [type="call"] [value="b"models.Relay(name=data['name'])""];
  1398 -> 1404;
  1406 [type="attribute"] [value="b'models.Relay'"];
  1404 -> 1406;
  1408 [type="identifier"] [value="b'models'"];
  1406 -> 1408;
  1410 [type="."] [value="b'.'"];
  1406 -> 1410;
  1412 [type="identifier"] [value="b'Relay'"];
  1406 -> 1412;
  1414 [type="argument_list"] [value="b"(name=data['name'])""];
  1404 -> 1414;
  1416 [type="("] [value="b'('"];
  1414 -> 1416;
  1418 [type="keyword_argument"] [value="b"name=data['name']""];
  1414 -> 1418;
  1420 [type="identifier"] [value="b'name'"];
  1418 -> 1420;
  1422 [type="="] [value="b'='"];
  1418 -> 1422;
  1424 [type="subscript"] [value="b"data['name']""];
  1418 -> 1424;
  1426 [type="identifier"] [value="b'data'"];
  1424 -> 1426;
  1428 [type="["] [value="b'['"];
  1424 -> 1428;
  1430 [type="string"] [value="b"'name'""];
  1424 -> 1430;
  1432 [type="string_start"] [value="b"'""];
  1430 -> 1432;
  1434 [type="string_content"] [value="b'name'"];
  1430 -> 1434;
  1436 [type="string_end"] [value="b"'""];
  1430 -> 1436;
  1438 [type="]"] [value="b']'"];
  1424 -> 1438;
  1440 [type=")"] [value="b')'"];
  1414 -> 1440;
  1442 [type="if_statement"] [value="b"if 'smtp' in data:\n            relay_model.smtp = data['smtp']""];
  1134 -> 1442;
  1444 [type="if"] [value="b'if'"];
  1442 -> 1444;
  1446 [type="comparison_operator"] [value="b"'smtp' in data""];
  1442 -> 1446;
  1448 [type="string"] [value="b"'smtp'""];
  1446 -> 1448;
  1450 [type="string_start"] [value="b"'""];
  1448 -> 1450;
  1452 [type="string_content"] [value="b'smtp'"];
  1448 -> 1452;
  1454 [type="string_end"] [value="b"'""];
  1448 -> 1454;
  1456 [type="in"] [value="b'in'"];
  1446 -> 1456;
  1458 [type="identifier"] [value="b'data'"];
  1446 -> 1458;
  1460 [type=":"] [value="b':'"];
  1442 -> 1460;
  1462 [type="block"] [value="b"relay_model.smtp = data['smtp']""];
  1442 -> 1462;
  1464 [type="expression_statement"] [value="b"relay_model.smtp = data['smtp']""];
  1462 -> 1464;
  1466 [type="assignment"] [value="b"relay_model.smtp = data['smtp']""];
  1464 -> 1466;
  1468 [type="attribute"] [value="b'relay_model.smtp'"];
  1466 -> 1468;
  1470 [type="identifier"] [value="b'relay_model'"];
  1468 -> 1470;
  1472 [type="."] [value="b'.'"];
  1468 -> 1472;
  1474 [type="identifier"] [value="b'smtp'"];
  1468 -> 1474;
  1476 [type="="] [value="b'='"];
  1466 -> 1476;
  1478 [type="subscript"] [value="b"data['smtp']""];
  1466 -> 1478;
  1480 [type="identifier"] [value="b'data'"];
  1478 -> 1480;
  1482 [type="["] [value="b'['"];
  1478 -> 1482;
  1484 [type="string"] [value="b"'smtp'""];
  1478 -> 1484;
  1486 [type="string_start"] [value="b"'""];
  1484 -> 1486;
  1488 [type="string_content"] [value="b'smtp'"];
  1484 -> 1488;
  1490 [type="string_end"] [value="b"'""];
  1484 -> 1490;
  1492 [type="]"] [value="b']'"];
  1478 -> 1492;
  1494 [type="if_statement"] [value="b"if 'comment' in data:\n            relay_model.comment = data['comment']""];
  1134 -> 1494;
  1496 [type="if"] [value="b'if'"];
  1494 -> 1496;
  1498 [type="comparison_operator"] [value="b"'comment' in data""];
  1494 -> 1498;
  1500 [type="string"] [value="b"'comment'""];
  1498 -> 1500;
  1502 [type="string_start"] [value="b"'""];
  1500 -> 1502;
  1504 [type="string_content"] [value="b'comment'"];
  1500 -> 1504;
  1506 [type="string_end"] [value="b"'""];
  1500 -> 1506;
  1508 [type="in"] [value="b'in'"];
  1498 -> 1508;
  1510 [type="identifier"] [value="b'data'"];
  1498 -> 1510;
  1512 [type=":"] [value="b':'"];
  1494 -> 1512;
  1514 [type="block"] [value="b"relay_model.comment = data['comment']""];
  1494 -> 1514;
  1516 [type="expression_statement"] [value="b"relay_model.comment = data['comment']""];
  1514 -> 1516;
  1518 [type="assignment"] [value="b"relay_model.comment = data['comment']""];
  1516 -> 1518;
  1520 [type="attribute"] [value="b'relay_model.comment'"];
  1518 -> 1520;
  1522 [type="identifier"] [value="b'relay_model'"];
  1520 -> 1522;
  1524 [type="."] [value="b'.'"];
  1520 -> 1524;
  1526 [type="identifier"] [value="b'comment'"];
  1520 -> 1526;
  1528 [type="="] [value="b'='"];
  1518 -> 1528;
  1530 [type="subscript"] [value="b"data['comment']""];
  1518 -> 1530;
  1532 [type="identifier"] [value="b'data'"];
  1530 -> 1532;
  1534 [type="["] [value="b'['"];
  1530 -> 1534;
  1536 [type="string"] [value="b"'comment'""];
  1530 -> 1536;
  1538 [type="string_start"] [value="b"'""];
  1536 -> 1538;
  1540 [type="string_content"] [value="b'comment'"];
  1536 -> 1540;
  1542 [type="string_end"] [value="b"'""];
  1536 -> 1542;
  1544 [type="]"] [value="b']'"];
  1530 -> 1544;
  1546 [type="expression_statement"] [value="b'db.session.add(relay_model)'"];
  1134 -> 1546;
  1548 [type="call"] [value="b'db.session.add(relay_model)'"];
  1546 -> 1548;
  1550 [type="attribute"] [value="b'db.session.add'"];
  1548 -> 1550;
  1552 [type="attribute"] [value="b'db.session'"];
  1550 -> 1552;
  1554 [type="identifier"] [value="b'db'"];
  1552 -> 1554;
  1556 [type="."] [value="b'.'"];
  1552 -> 1556;
  1558 [type="identifier"] [value="b'session'"];
  1552 -> 1558;
  1560 [type="."] [value="b'.'"];
  1550 -> 1560;
  1562 [type="identifier"] [value="b'add'"];
  1550 -> 1562;
  1564 [type="argument_list"] [value="b'(relay_model)'"];
  1548 -> 1564;
  1566 [type="("] [value="b'('"];
  1564 -> 1566;
  1568 [type="identifier"] [value="b'relay_model'"];
  1564 -> 1568;
  1570 [type=")"] [value="b')'"];
  1564 -> 1570;
  1572 [type="expression_statement"] [value="b'db.session.commit()'"];
  1134 -> 1572;
  1574 [type="call"] [value="b'db.session.commit()'"];
  1572 -> 1574;
  1576 [type="attribute"] [value="b'db.session.commit'"];
  1574 -> 1576;
  1578 [type="attribute"] [value="b'db.session'"];
  1576 -> 1578;
  1580 [type="identifier"] [value="b'db'"];
  1578 -> 1580;
  1582 [type="."] [value="b'.'"];
  1578 -> 1582;
  1584 [type="identifier"] [value="b'session'"];
  1578 -> 1584;
  1586 [type="."] [value="b'.'"];
  1576 -> 1586;
  1588 [type="identifier"] [value="b'commit'"];
  1576 -> 1588;
  1590 [type="argument_list"] [value="b'()'"];
  1574 -> 1590;
  1592 [type="("] [value="b'('"];
  1590 -> 1592;
  1594 [type=")"] [value="b')'"];
  1590 -> 1594;
  1596 [type="return_statement"] [value="b'return {\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  1134 -> 1596;
  1598 [type="return"] [value="b'return'"];
  1596 -> 1598;
  1600 [type="expression_list"] [value="b'{\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}, 200'"];
  1596 -> 1600;
  1602 [type="dictionary"] [value="b'{\'code\': 200, \'message\': f\'Relayed domain {data["name"]} has been created\'}'"];
  1600 -> 1602;
  1604 [type="{"] [value="b'{'"];
  1602 -> 1604;
  1606 [type="pair"] [value="b"'code': 200""];
  1602 -> 1606;
  1608 [type="string"] [value="b"'code'""];
  1606 -> 1608;
  1610 [type="string_start"] [value="b"'""];
  1608 -> 1610;
  1612 [type="string_content"] [value="b'code'"];
  1608 -> 1612;
  1614 [type="string_end"] [value="b"'""];
  1608 -> 1614;
  1616 [type=":"] [value="b':'"];
  1606 -> 1616;
  1618 [type="integer"] [value="b'200'"];
  1606 -> 1618;
  1620 [type=","] [value="b','"];
  1602 -> 1620;
  1622 [type="pair"] [value="b'\'message\': f\'Relayed domain {data["name"]} has been created\''"];
  1602 -> 1622;
  1624 [type="string"] [value="b"'message'""];
  1622 -> 1624;
  1626 [type="string_start"] [value="b"'""];
  1624 -> 1626;
  1628 [type="string_content"] [value="b'message'"];
  1624 -> 1628;
  1630 [type="string_end"] [value="b"'""];
  1624 -> 1630;
  1632 [type=":"] [value="b':'"];
  1622 -> 1632;
  1634 [type="string"] [value="b'f\'Relayed domain {data["name"]} has been created\''"];
  1622 -> 1634;
  1636 [type="string_start"] [value="b"f'""];
  1634 -> 1636;
  1638 [type="string_content"] [value="b'Relayed domain '"];
  1634 -> 1638;
  1640 [type="interpolation"] [value="b'{data["name"]}'"];
  1634 -> 1640;
  1642 [type="{"] [value="b'{'"];
  1640 -> 1642;
  1644 [type="subscript"] [value="b'data["name"]'"];
  1640 -> 1644;
  1646 [type="identifier"] [value="b'data'"];
  1644 -> 1646;
  1648 [type="["] [value="b'['"];
  1644 -> 1648;
  1650 [type="string"] [value="b'"name"'"];
  1644 -> 1650;
  1652 [type="string_start"] [value="b'"'"];
  1650 -> 1652;
  1654 [type="string_content"] [value="b'name'"];
  1650 -> 1654;
  1656 [type="string_end"] [value="b'"'"];
  1650 -> 1656;
  1658 [type="]"] [value="b']'"];
  1644 -> 1658;
  1660 [type="}"] [value="b'}'"];
  1640 -> 1660;
  1662 [type="string_content"] [value="b' has been created'"];
  1634 -> 1662;
  1664 [type="string_end"] [value="b"'""];
  1634 -> 1664;
  1666 [type="}"] [value="b'}'"];
  1602 -> 1666;
  1668 [type=","] [value="b','"];
  1600 -> 1668;
  1670 [type="integer"] [value="b'200'"];
  1600 -> 1670;
  1672 [type="decorated_definition"] [value="b'@relay.route(\'/<string:name>\')\nclass Relay(Resource):\n    @relay.doc(\'find_relay\')\n    @relay.response(200, \'Success\', relay_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self, name):\n        """ Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200\n\n    @relay.doc(\'update_relay\')\n    @relay.expect(relay_fields_update)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def patch(self, name):\n        """ Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200\n\n\n    @relay.doc(\'delete_relay\')\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def delete(self, name):\n        """ Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200'"];
  1 -> 1672;
  1674 [type="decorator"] [value="b"@relay.route('/<string:name>')""];
  1672 -> 1674;
  1676 [type="@"] [value="b'@'"];
  1674 -> 1676;
  1678 [type="call"] [value="b"relay.route('/<string:name>')""];
  1674 -> 1678;
  1680 [type="attribute"] [value="b'relay.route'"];
  1678 -> 1680;
  1682 [type="identifier"] [value="b'relay'"];
  1680 -> 1682;
  1684 [type="."] [value="b'.'"];
  1680 -> 1684;
  1686 [type="identifier"] [value="b'route'"];
  1680 -> 1686;
  1688 [type="argument_list"] [value="b"('/<string:name>')""];
  1678 -> 1688;
  1690 [type="("] [value="b'('"];
  1688 -> 1690;
  1692 [type="string"] [value="b"'/<string:name>'""];
  1688 -> 1692;
  1694 [type="string_start"] [value="b"'""];
  1692 -> 1694;
  1696 [type="string_content"] [value="b'/<string:name>'"];
  1692 -> 1696;
  1698 [type="string_end"] [value="b"'""];
  1692 -> 1698;
  1700 [type=")"] [value="b')'"];
  1688 -> 1700;
  1702 [type="class_definition"] [value="b'class Relay(Resource):\n    @relay.doc(\'find_relay\')\n    @relay.response(200, \'Success\', relay_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self, name):\n        """ Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200\n\n    @relay.doc(\'update_relay\')\n    @relay.expect(relay_fields_update)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def patch(self, name):\n        """ Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200\n\n\n    @relay.doc(\'delete_relay\')\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def delete(self, name):\n        """ Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200'"];
  1672 -> 1702;
  1704 [type="class"] [value="b'class'"];
  1702 -> 1704;
  1706 [type="identifier"] [value="b'Relay'"];
  1702 -> 1706;
  1708 [type="argument_list"] [value="b'(Resource)'"];
  1702 -> 1708;
  1710 [type="("] [value="b'('"];
  1708 -> 1710;
  1712 [type="identifier"] [value="b'Resource'"];
  1708 -> 1712;
  1714 [type=")"] [value="b')'"];
  1708 -> 1714;
  1716 [type=":"] [value="b':'"];
  1702 -> 1716;
  1718 [type="block"] [value="b'@relay.doc(\'find_relay\')\n    @relay.response(200, \'Success\', relay_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self, name):\n        """ Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200\n\n    @relay.doc(\'update_relay\')\n    @relay.expect(relay_fields_update)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def patch(self, name):\n        """ Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200\n\n\n    @relay.doc(\'delete_relay\')\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def delete(self, name):\n        """ Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200'"];
  1702 -> 1718;
  1720 [type="decorated_definition"] [value="b'@relay.doc(\'find_relay\')\n    @relay.response(200, \'Success\', relay_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def get(self, name):\n        """ Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200'"];
  1718 -> 1720;
  1722 [type="decorator"] [value="b"@relay.doc('find_relay')""];
  1720 -> 1722;
  1724 [type="@"] [value="b'@'"];
  1722 -> 1724;
  1726 [type="call"] [value="b"relay.doc('find_relay')""];
  1722 -> 1726;
  1728 [type="attribute"] [value="b'relay.doc'"];
  1726 -> 1728;
  1730 [type="identifier"] [value="b'relay'"];
  1728 -> 1730;
  1732 [type="."] [value="b'.'"];
  1728 -> 1732;
  1734 [type="identifier"] [value="b'doc'"];
  1728 -> 1734;
  1736 [type="argument_list"] [value="b"('find_relay')""];
  1726 -> 1736;
  1738 [type="("] [value="b'('"];
  1736 -> 1738;
  1740 [type="string"] [value="b"'find_relay'""];
  1736 -> 1740;
  1742 [type="string_start"] [value="b"'""];
  1740 -> 1742;
  1744 [type="string_content"] [value="b'find_relay'"];
  1740 -> 1744;
  1746 [type="string_end"] [value="b"'""];
  1740 -> 1746;
  1748 [type=")"] [value="b')'"];
  1736 -> 1748;
  1750 [type="decorator"] [value="b"@relay.response(200, 'Success', relay_fields)""];
  1720 -> 1750;
  1752 [type="@"] [value="b'@'"];
  1750 -> 1752;
  1754 [type="call"] [value="b"relay.response(200, 'Success', relay_fields)""];
  1750 -> 1754;
  1756 [type="attribute"] [value="b'relay.response'"];
  1754 -> 1756;
  1758 [type="identifier"] [value="b'relay'"];
  1756 -> 1758;
  1760 [type="."] [value="b'.'"];
  1756 -> 1760;
  1762 [type="identifier"] [value="b'response'"];
  1756 -> 1762;
  1764 [type="argument_list"] [value="b"(200, 'Success', relay_fields)""];
  1754 -> 1764;
  1766 [type="("] [value="b'('"];
  1764 -> 1766;
  1768 [type="integer"] [value="b'200'"];
  1764 -> 1768;
  1770 [type=","] [value="b','"];
  1764 -> 1770;
  1772 [type="string"] [value="b"'Success'""];
  1764 -> 1772;
  1774 [type="string_start"] [value="b"'""];
  1772 -> 1774;
  1776 [type="string_content"] [value="b'Success'"];
  1772 -> 1776;
  1778 [type="string_end"] [value="b"'""];
  1772 -> 1778;
  1780 [type=","] [value="b','"];
  1764 -> 1780;
  1782 [type="identifier"] [value="b'relay_fields'"];
  1764 -> 1782;
  1784 [type=")"] [value="b')'"];
  1764 -> 1784;
  1786 [type="decorator"] [value="b"@relay.response(400, 'Input validation exception', response_fields)""];
  1720 -> 1786;
  1788 [type="@"] [value="b'@'"];
  1786 -> 1788;
  1790 [type="call"] [value="b"relay.response(400, 'Input validation exception', response_fields)""];
  1786 -> 1790;
  1792 [type="attribute"] [value="b'relay.response'"];
  1790 -> 1792;
  1794 [type="identifier"] [value="b'relay'"];
  1792 -> 1794;
  1796 [type="."] [value="b'.'"];
  1792 -> 1796;
  1798 [type="identifier"] [value="b'response'"];
  1792 -> 1798;
  1800 [type="argument_list"] [value="b"(400, 'Input validation exception', response_fields)""];
  1790 -> 1800;
  1802 [type="("] [value="b'('"];
  1800 -> 1802;
  1804 [type="integer"] [value="b'400'"];
  1800 -> 1804;
  1806 [type=","] [value="b','"];
  1800 -> 1806;
  1808 [type="string"] [value="b"'Input validation exception'""];
  1800 -> 1808;
  1810 [type="string_start"] [value="b"'""];
  1808 -> 1810;
  1812 [type="string_content"] [value="b'Input validation exception'"];
  1808 -> 1812;
  1814 [type="string_end"] [value="b"'""];
  1808 -> 1814;
  1816 [type=","] [value="b','"];
  1800 -> 1816;
  1818 [type="identifier"] [value="b'response_fields'"];
  1800 -> 1818;
  1820 [type=")"] [value="b')'"];
  1800 -> 1820;
  1822 [type="decorator"] [value="b"@relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  1720 -> 1822;
  1824 [type="@"] [value="b'@'"];
  1822 -> 1824;
  1826 [type="call"] [value="b"relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  1822 -> 1826;
  1828 [type="attribute"] [value="b'relay.doc'"];
  1826 -> 1828;
  1830 [type="identifier"] [value="b'relay'"];
  1828 -> 1830;
  1832 [type="."] [value="b'.'"];
  1828 -> 1832;
  1834 [type="identifier"] [value="b'doc'"];
  1828 -> 1834;
  1836 [type="argument_list"] [value="b"(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  1826 -> 1836;
  1838 [type="("] [value="b'('"];
  1836 -> 1838;
  1840 [type="keyword_argument"] [value="b"responses={401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  1836 -> 1840;
  1842 [type="identifier"] [value="b'responses'"];
  1840 -> 1842;
  1844 [type="="] [value="b'='"];
  1840 -> 1844;
  1846 [type="dictionary"] [value="b"{401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  1840 -> 1846;
  1848 [type="{"] [value="b'{'"];
  1846 -> 1848;
  1850 [type="pair"] [value="b"401: 'Authorization header missing'""];
  1846 -> 1850;
  1852 [type="integer"] [value="b'401'"];
  1850 -> 1852;
  1854 [type=":"] [value="b':'"];
  1850 -> 1854;
  1856 [type="string"] [value="b"'Authorization header missing'""];
  1850 -> 1856;
  1858 [type="string_start"] [value="b"'""];
  1856 -> 1858;
  1860 [type="string_content"] [value="b'Authorization header missing'"];
  1856 -> 1860;
  1862 [type="string_end"] [value="b"'""];
  1856 -> 1862;
  1864 [type=","] [value="b','"];
  1846 -> 1864;
  1866 [type="pair"] [value="b"403: 'Invalid authorization header'""];
  1846 -> 1866;
  1868 [type="integer"] [value="b'403'"];
  1866 -> 1868;
  1870 [type=":"] [value="b':'"];
  1866 -> 1870;
  1872 [type="string"] [value="b"'Invalid authorization header'""];
  1866 -> 1872;
  1874 [type="string_start"] [value="b"'""];
  1872 -> 1874;
  1876 [type="string_content"] [value="b'Invalid authorization header'"];
  1872 -> 1876;
  1878 [type="string_end"] [value="b"'""];
  1872 -> 1878;
  1880 [type="}"] [value="b'}'"];
  1846 -> 1880;
  1882 [type=")"] [value="b')'"];
  1836 -> 1882;
  1884 [type="decorator"] [value="b"@relay.response(404, 'Relay not found', response_fields)""];
  1720 -> 1884;
  1886 [type="@"] [value="b'@'"];
  1884 -> 1886;
  1888 [type="call"] [value="b"relay.response(404, 'Relay not found', response_fields)""];
  1884 -> 1888;
  1890 [type="attribute"] [value="b'relay.response'"];
  1888 -> 1890;
  1892 [type="identifier"] [value="b'relay'"];
  1890 -> 1892;
  1894 [type="."] [value="b'.'"];
  1890 -> 1894;
  1896 [type="identifier"] [value="b'response'"];
  1890 -> 1896;
  1898 [type="argument_list"] [value="b"(404, 'Relay not found', response_fields)""];
  1888 -> 1898;
  1900 [type="("] [value="b'('"];
  1898 -> 1900;
  1902 [type="integer"] [value="b'404'"];
  1898 -> 1902;
  1904 [type=","] [value="b','"];
  1898 -> 1904;
  1906 [type="string"] [value="b"'Relay not found'""];
  1898 -> 1906;
  1908 [type="string_start"] [value="b"'""];
  1906 -> 1908;
  1910 [type="string_content"] [value="b'Relay not found'"];
  1906 -> 1910;
  1912 [type="string_end"] [value="b"'""];
  1906 -> 1912;
  1914 [type=","] [value="b','"];
  1898 -> 1914;
  1916 [type="identifier"] [value="b'response_fields'"];
  1898 -> 1916;
  1918 [type=")"] [value="b')'"];
  1898 -> 1918;
  1920 [type="decorator"] [value="b"@relay.doc(security='Bearer')""];
  1720 -> 1920;
  1922 [type="@"] [value="b'@'"];
  1920 -> 1922;
  1924 [type="call"] [value="b"relay.doc(security='Bearer')""];
  1920 -> 1924;
  1926 [type="attribute"] [value="b'relay.doc'"];
  1924 -> 1926;
  1928 [type="identifier"] [value="b'relay'"];
  1926 -> 1928;
  1930 [type="."] [value="b'.'"];
  1926 -> 1930;
  1932 [type="identifier"] [value="b'doc'"];
  1926 -> 1932;
  1934 [type="argument_list"] [value="b"(security='Bearer')""];
  1924 -> 1934;
  1936 [type="("] [value="b'('"];
  1934 -> 1936;
  1938 [type="keyword_argument"] [value="b"security='Bearer'""];
  1934 -> 1938;
  1940 [type="identifier"] [value="b'security'"];
  1938 -> 1940;
  1942 [type="="] [value="b'='"];
  1938 -> 1942;
  1944 [type="string"] [value="b"'Bearer'""];
  1938 -> 1944;
  1946 [type="string_start"] [value="b"'""];
  1944 -> 1946;
  1948 [type="string_content"] [value="b'Bearer'"];
  1944 -> 1948;
  1950 [type="string_end"] [value="b"'""];
  1944 -> 1950;
  1952 [type=")"] [value="b')'"];
  1934 -> 1952;
  1954 [type="decorator"] [value="b'@common.api_token_authorization'"];
  1720 -> 1954;
  1956 [type="@"] [value="b'@'"];
  1954 -> 1956;
  1958 [type="attribute"] [value="b'common.api_token_authorization'"];
  1954 -> 1958;
  1960 [type="identifier"] [value="b'common'"];
  1958 -> 1960;
  1962 [type="."] [value="b'.'"];
  1958 -> 1962;
  1964 [type="identifier"] [value="b'api_token_authorization'"];
  1958 -> 1964;
  1966 [type="function_definition"] [value="b'def get(self, name):\n        """ Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200'"];
  1720 -> 1966;
  1968 [type="def"] [value="b'def'"];
  1966 -> 1968;
  1970 [type="identifier"] [value="b'get'"];
  1966 -> 1970;
  1972 [type="parameters"] [value="b'(self, name)'"];
  1966 -> 1972;
  1974 [type="("] [value="b'('"];
  1972 -> 1974;
  1976 [type="identifier"] [value="b'self'"];
  1972 -> 1976;
  1978 [type=","] [value="b','"];
  1972 -> 1978;
  1980 [type="identifier"] [value="b'name'"];
  1972 -> 1980;
  1982 [type=")"] [value="b')'"];
  1972 -> 1982;
  1984 [type=":"] [value="b':'"];
  1966 -> 1984;
  1986 [type="block"] [value="b'""" Look up the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        return  marshal(relay_found, relay_fields), 200'"];
  1966 -> 1986;
  1988 [type="expression_statement"] [value="b'""" Look up the specified relay """'"];
  1986 -> 1988;
  1990 [type="string"] [value="b'""" Look up the specified relay """'"];
  1988 -> 1990;
  1992 [type="string_start"] [value="b'"""'"];
  1990 -> 1992;
  1994 [type="string_content"] [value="b' Look up the specified relay '"];
  1990 -> 1994;
  1996 [type="string_end"] [value="b'"""'"];
  1990 -> 1996;
  1998 [type="if_statement"] [value="b"if not validators.domain(name):\n            return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  1986 -> 1998;
  2000 [type="if"] [value="b'if'"];
  1998 -> 2000;
  2002 [type="not_operator"] [value="b'not validators.domain(name)'"];
  1998 -> 2002;
  2004 [type="not"] [value="b'not'"];
  2002 -> 2004;
  2006 [type="call"] [value="b'validators.domain(name)'"];
  2002 -> 2006;
  2008 [type="attribute"] [value="b'validators.domain'"];
  2006 -> 2008;
  2010 [type="identifier"] [value="b'validators'"];
  2008 -> 2010;
  2012 [type="."] [value="b'.'"];
  2008 -> 2012;
  2014 [type="identifier"] [value="b'domain'"];
  2008 -> 2014;
  2016 [type="argument_list"] [value="b'(name)'"];
  2006 -> 2016;
  2018 [type="("] [value="b'('"];
  2016 -> 2018;
  2020 [type="identifier"] [value="b'name'"];
  2016 -> 2020;
  2022 [type=")"] [value="b')'"];
  2016 -> 2022;
  2024 [type=":"] [value="b':'"];
  1998 -> 2024;
  2026 [type="block"] [value="b"return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  1998 -> 2026;
  2028 [type="return_statement"] [value="b"return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  2026 -> 2028;
  2030 [type="return"] [value="b'return'"];
  2028 -> 2030;
  2032 [type="expression_list"] [value="b"{ 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  2028 -> 2032;
  2034 [type="dictionary"] [value="b"{ 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}""];
  2032 -> 2034;
  2036 [type="{"] [value="b'{'"];
  2034 -> 2036;
  2038 [type="pair"] [value="b"'code': 400""];
  2034 -> 2038;
  2040 [type="string"] [value="b"'code'""];
  2038 -> 2040;
  2042 [type="string_start"] [value="b"'""];
  2040 -> 2042;
  2044 [type="string_content"] [value="b'code'"];
  2040 -> 2044;
  2046 [type="string_end"] [value="b"'""];
  2040 -> 2046;
  2048 [type=":"] [value="b':'"];
  2038 -> 2048;
  2050 [type="integer"] [value="b'400'"];
  2038 -> 2050;
  2052 [type=","] [value="b','"];
  2034 -> 2052;
  2054 [type="pair"] [value="b"'message': f'Relayed domain {name} is not a valid domain'""];
  2034 -> 2054;
  2056 [type="string"] [value="b"'message'""];
  2054 -> 2056;
  2058 [type="string_start"] [value="b"'""];
  2056 -> 2058;
  2060 [type="string_content"] [value="b'message'"];
  2056 -> 2060;
  2062 [type="string_end"] [value="b"'""];
  2056 -> 2062;
  2064 [type=":"] [value="b':'"];
  2054 -> 2064;
  2066 [type="string"] [value="b"f'Relayed domain {name} is not a valid domain'""];
  2054 -> 2066;
  2068 [type="string_start"] [value="b"f'""];
  2066 -> 2068;
  2070 [type="string_content"] [value="b'Relayed domain '"];
  2066 -> 2070;
  2072 [type="interpolation"] [value="b'{name}'"];
  2066 -> 2072;
  2074 [type="{"] [value="b'{'"];
  2072 -> 2074;
  2076 [type="identifier"] [value="b'name'"];
  2072 -> 2076;
  2078 [type="}"] [value="b'}'"];
  2072 -> 2078;
  2080 [type="string_content"] [value="b' is not a valid domain'"];
  2066 -> 2080;
  2082 [type="string_end"] [value="b"'""];
  2066 -> 2082;
  2084 [type="}"] [value="b'}'"];
  2034 -> 2084;
  2086 [type=","] [value="b','"];
  2032 -> 2086;
  2088 [type="integer"] [value="b'400'"];
  2032 -> 2088;
  2090 [type="expression_statement"] [value="b'relay_found = models.Relay.query.filter_by(name=name).first()'"];
  1986 -> 2090;
  2092 [type="assignment"] [value="b'relay_found = models.Relay.query.filter_by(name=name).first()'"];
  2090 -> 2092;
  2094 [type="identifier"] [value="b'relay_found'"];
  2092 -> 2094;
  2096 [type="="] [value="b'='"];
  2092 -> 2096;
  2098 [type="call"] [value="b'models.Relay.query.filter_by(name=name).first()'"];
  2092 -> 2098;
  2100 [type="attribute"] [value="b'models.Relay.query.filter_by(name=name).first'"];
  2098 -> 2100;
  2102 [type="call"] [value="b'models.Relay.query.filter_by(name=name)'"];
  2100 -> 2102;
  2104 [type="attribute"] [value="b'models.Relay.query.filter_by'"];
  2102 -> 2104;
  2106 [type="attribute"] [value="b'models.Relay.query'"];
  2104 -> 2106;
  2108 [type="attribute"] [value="b'models.Relay'"];
  2106 -> 2108;
  2110 [type="identifier"] [value="b'models'"];
  2108 -> 2110;
  2112 [type="."] [value="b'.'"];
  2108 -> 2112;
  2114 [type="identifier"] [value="b'Relay'"];
  2108 -> 2114;
  2116 [type="."] [value="b'.'"];
  2106 -> 2116;
  2118 [type="identifier"] [value="b'query'"];
  2106 -> 2118;
  2120 [type="."] [value="b'.'"];
  2104 -> 2120;
  2122 [type="identifier"] [value="b'filter_by'"];
  2104 -> 2122;
  2124 [type="argument_list"] [value="b'(name=name)'"];
  2102 -> 2124;
  2126 [type="("] [value="b'('"];
  2124 -> 2126;
  2128 [type="keyword_argument"] [value="b'name=name'"];
  2124 -> 2128;
  2130 [type="identifier"] [value="b'name'"];
  2128 -> 2130;
  2132 [type="="] [value="b'='"];
  2128 -> 2132;
  2134 [type="identifier"] [value="b'name'"];
  2128 -> 2134;
  2136 [type=")"] [value="b')'"];
  2124 -> 2136;
  2138 [type="."] [value="b'.'"];
  2100 -> 2138;
  2140 [type="identifier"] [value="b'first'"];
  2100 -> 2140;
  2142 [type="argument_list"] [value="b'()'"];
  2098 -> 2142;
  2144 [type="("] [value="b'('"];
  2142 -> 2144;
  2146 [type=")"] [value="b')'"];
  2142 -> 2146;
  2148 [type="if_statement"] [value="b"if relay_found is None:\n            return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  1986 -> 2148;
  2150 [type="if"] [value="b'if'"];
  2148 -> 2150;
  2152 [type="comparison_operator"] [value="b'relay_found is None'"];
  2148 -> 2152;
  2154 [type="identifier"] [value="b'relay_found'"];
  2152 -> 2154;
  2156 [type="is"] [value="b'is'"];
  2152 -> 2156;
  2158 [type="none"] [value="b'None'"];
  2152 -> 2158;
  2160 [type=":"] [value="b':'"];
  2148 -> 2160;
  2162 [type="block"] [value="b"return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2148 -> 2162;
  2164 [type="return_statement"] [value="b"return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2162 -> 2164;
  2166 [type="return"] [value="b'return'"];
  2164 -> 2166;
  2168 [type="expression_list"] [value="b"{ 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2164 -> 2168;
  2170 [type="dictionary"] [value="b"{ 'code': 404, 'message': f'Relayed domain {name} cannot be found'}""];
  2168 -> 2170;
  2172 [type="{"] [value="b'{'"];
  2170 -> 2172;
  2174 [type="pair"] [value="b"'code': 404""];
  2170 -> 2174;
  2176 [type="string"] [value="b"'code'""];
  2174 -> 2176;
  2178 [type="string_start"] [value="b"'""];
  2176 -> 2178;
  2180 [type="string_content"] [value="b'code'"];
  2176 -> 2180;
  2182 [type="string_end"] [value="b"'""];
  2176 -> 2182;
  2184 [type=":"] [value="b':'"];
  2174 -> 2184;
  2186 [type="integer"] [value="b'404'"];
  2174 -> 2186;
  2188 [type=","] [value="b','"];
  2170 -> 2188;
  2190 [type="pair"] [value="b"'message': f'Relayed domain {name} cannot be found'""];
  2170 -> 2190;
  2192 [type="string"] [value="b"'message'""];
  2190 -> 2192;
  2194 [type="string_start"] [value="b"'""];
  2192 -> 2194;
  2196 [type="string_content"] [value="b'message'"];
  2192 -> 2196;
  2198 [type="string_end"] [value="b"'""];
  2192 -> 2198;
  2200 [type=":"] [value="b':'"];
  2190 -> 2200;
  2202 [type="string"] [value="b"f'Relayed domain {name} cannot be found'""];
  2190 -> 2202;
  2204 [type="string_start"] [value="b"f'""];
  2202 -> 2204;
  2206 [type="string_content"] [value="b'Relayed domain '"];
  2202 -> 2206;
  2208 [type="interpolation"] [value="b'{name}'"];
  2202 -> 2208;
  2210 [type="{"] [value="b'{'"];
  2208 -> 2210;
  2212 [type="identifier"] [value="b'name'"];
  2208 -> 2212;
  2214 [type="}"] [value="b'}'"];
  2208 -> 2214;
  2216 [type="string_content"] [value="b' cannot be found'"];
  2202 -> 2216;
  2218 [type="string_end"] [value="b"'""];
  2202 -> 2218;
  2220 [type="}"] [value="b'}'"];
  2170 -> 2220;
  2222 [type=","] [value="b','"];
  2168 -> 2222;
  2224 [type="integer"] [value="b'404'"];
  2168 -> 2224;
  2226 [type="return_statement"] [value="b'return  marshal(relay_found, relay_fields), 200'"];
  1986 -> 2226;
  2228 [type="return"] [value="b'return'"];
  2226 -> 2228;
  2230 [type="expression_list"] [value="b'marshal(relay_found, relay_fields), 200'"];
  2226 -> 2230;
  2232 [type="call"] [value="b'marshal(relay_found, relay_fields)'"];
  2230 -> 2232;
  2234 [type="identifier"] [value="b'marshal'"];
  2232 -> 2234;
  2236 [type="argument_list"] [value="b'(relay_found, relay_fields)'"];
  2232 -> 2236;
  2238 [type="("] [value="b'('"];
  2236 -> 2238;
  2240 [type="identifier"] [value="b'relay_found'"];
  2236 -> 2240;
  2242 [type=","] [value="b','"];
  2236 -> 2242;
  2244 [type="identifier"] [value="b'relay_fields'"];
  2236 -> 2244;
  2246 [type=")"] [value="b')'"];
  2236 -> 2246;
  2248 [type=","] [value="b','"];
  2230 -> 2248;
  2250 [type="integer"] [value="b'200'"];
  2230 -> 2250;
  2252 [type="decorated_definition"] [value="b'@relay.doc(\'update_relay\')\n    @relay.expect(relay_fields_update)\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def patch(self, name):\n        """ Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200'"];
  1718 -> 2252;
  2254 [type="decorator"] [value="b"@relay.doc('update_relay')""];
  2252 -> 2254;
  2256 [type="@"] [value="b'@'"];
  2254 -> 2256;
  2258 [type="call"] [value="b"relay.doc('update_relay')""];
  2254 -> 2258;
  2260 [type="attribute"] [value="b'relay.doc'"];
  2258 -> 2260;
  2262 [type="identifier"] [value="b'relay'"];
  2260 -> 2262;
  2264 [type="."] [value="b'.'"];
  2260 -> 2264;
  2266 [type="identifier"] [value="b'doc'"];
  2260 -> 2266;
  2268 [type="argument_list"] [value="b"('update_relay')""];
  2258 -> 2268;
  2270 [type="("] [value="b'('"];
  2268 -> 2270;
  2272 [type="string"] [value="b"'update_relay'""];
  2268 -> 2272;
  2274 [type="string_start"] [value="b"'""];
  2272 -> 2274;
  2276 [type="string_content"] [value="b'update_relay'"];
  2272 -> 2276;
  2278 [type="string_end"] [value="b"'""];
  2272 -> 2278;
  2280 [type=")"] [value="b')'"];
  2268 -> 2280;
  2282 [type="decorator"] [value="b'@relay.expect(relay_fields_update)'"];
  2252 -> 2282;
  2284 [type="@"] [value="b'@'"];
  2282 -> 2284;
  2286 [type="call"] [value="b'relay.expect(relay_fields_update)'"];
  2282 -> 2286;
  2288 [type="attribute"] [value="b'relay.expect'"];
  2286 -> 2288;
  2290 [type="identifier"] [value="b'relay'"];
  2288 -> 2290;
  2292 [type="."] [value="b'.'"];
  2288 -> 2292;
  2294 [type="identifier"] [value="b'expect'"];
  2288 -> 2294;
  2296 [type="argument_list"] [value="b'(relay_fields_update)'"];
  2286 -> 2296;
  2298 [type="("] [value="b'('"];
  2296 -> 2298;
  2300 [type="identifier"] [value="b'relay_fields_update'"];
  2296 -> 2300;
  2302 [type=")"] [value="b')'"];
  2296 -> 2302;
  2304 [type="decorator"] [value="b"@relay.response(200, 'Success', response_fields)""];
  2252 -> 2304;
  2306 [type="@"] [value="b'@'"];
  2304 -> 2306;
  2308 [type="call"] [value="b"relay.response(200, 'Success', response_fields)""];
  2304 -> 2308;
  2310 [type="attribute"] [value="b'relay.response'"];
  2308 -> 2310;
  2312 [type="identifier"] [value="b'relay'"];
  2310 -> 2312;
  2314 [type="."] [value="b'.'"];
  2310 -> 2314;
  2316 [type="identifier"] [value="b'response'"];
  2310 -> 2316;
  2318 [type="argument_list"] [value="b"(200, 'Success', response_fields)""];
  2308 -> 2318;
  2320 [type="("] [value="b'('"];
  2318 -> 2320;
  2322 [type="integer"] [value="b'200'"];
  2318 -> 2322;
  2324 [type=","] [value="b','"];
  2318 -> 2324;
  2326 [type="string"] [value="b"'Success'""];
  2318 -> 2326;
  2328 [type="string_start"] [value="b"'""];
  2326 -> 2328;
  2330 [type="string_content"] [value="b'Success'"];
  2326 -> 2330;
  2332 [type="string_end"] [value="b"'""];
  2326 -> 2332;
  2334 [type=","] [value="b','"];
  2318 -> 2334;
  2336 [type="identifier"] [value="b'response_fields'"];
  2318 -> 2336;
  2338 [type=")"] [value="b')'"];
  2318 -> 2338;
  2340 [type="decorator"] [value="b"@relay.response(400, 'Input validation exception', response_fields)""];
  2252 -> 2340;
  2342 [type="@"] [value="b'@'"];
  2340 -> 2342;
  2344 [type="call"] [value="b"relay.response(400, 'Input validation exception', response_fields)""];
  2340 -> 2344;
  2346 [type="attribute"] [value="b'relay.response'"];
  2344 -> 2346;
  2348 [type="identifier"] [value="b'relay'"];
  2346 -> 2348;
  2350 [type="."] [value="b'.'"];
  2346 -> 2350;
  2352 [type="identifier"] [value="b'response'"];
  2346 -> 2352;
  2354 [type="argument_list"] [value="b"(400, 'Input validation exception', response_fields)""];
  2344 -> 2354;
  2356 [type="("] [value="b'('"];
  2354 -> 2356;
  2358 [type="integer"] [value="b'400'"];
  2354 -> 2358;
  2360 [type=","] [value="b','"];
  2354 -> 2360;
  2362 [type="string"] [value="b"'Input validation exception'""];
  2354 -> 2362;
  2364 [type="string_start"] [value="b"'""];
  2362 -> 2364;
  2366 [type="string_content"] [value="b'Input validation exception'"];
  2362 -> 2366;
  2368 [type="string_end"] [value="b"'""];
  2362 -> 2368;
  2370 [type=","] [value="b','"];
  2354 -> 2370;
  2372 [type="identifier"] [value="b'response_fields'"];
  2354 -> 2372;
  2374 [type=")"] [value="b')'"];
  2354 -> 2374;
  2376 [type="decorator"] [value="b"@relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  2252 -> 2376;
  2378 [type="@"] [value="b'@'"];
  2376 -> 2378;
  2380 [type="call"] [value="b"relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  2376 -> 2380;
  2382 [type="attribute"] [value="b'relay.doc'"];
  2380 -> 2382;
  2384 [type="identifier"] [value="b'relay'"];
  2382 -> 2384;
  2386 [type="."] [value="b'.'"];
  2382 -> 2386;
  2388 [type="identifier"] [value="b'doc'"];
  2382 -> 2388;
  2390 [type="argument_list"] [value="b"(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  2380 -> 2390;
  2392 [type="("] [value="b'('"];
  2390 -> 2392;
  2394 [type="keyword_argument"] [value="b"responses={401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  2390 -> 2394;
  2396 [type="identifier"] [value="b'responses'"];
  2394 -> 2396;
  2398 [type="="] [value="b'='"];
  2394 -> 2398;
  2400 [type="dictionary"] [value="b"{401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  2394 -> 2400;
  2402 [type="{"] [value="b'{'"];
  2400 -> 2402;
  2404 [type="pair"] [value="b"401: 'Authorization header missing'""];
  2400 -> 2404;
  2406 [type="integer"] [value="b'401'"];
  2404 -> 2406;
  2408 [type=":"] [value="b':'"];
  2404 -> 2408;
  2410 [type="string"] [value="b"'Authorization header missing'""];
  2404 -> 2410;
  2412 [type="string_start"] [value="b"'""];
  2410 -> 2412;
  2414 [type="string_content"] [value="b'Authorization header missing'"];
  2410 -> 2414;
  2416 [type="string_end"] [value="b"'""];
  2410 -> 2416;
  2418 [type=","] [value="b','"];
  2400 -> 2418;
  2420 [type="pair"] [value="b"403: 'Invalid authorization header'""];
  2400 -> 2420;
  2422 [type="integer"] [value="b'403'"];
  2420 -> 2422;
  2424 [type=":"] [value="b':'"];
  2420 -> 2424;
  2426 [type="string"] [value="b"'Invalid authorization header'""];
  2420 -> 2426;
  2428 [type="string_start"] [value="b"'""];
  2426 -> 2428;
  2430 [type="string_content"] [value="b'Invalid authorization header'"];
  2426 -> 2430;
  2432 [type="string_end"] [value="b"'""];
  2426 -> 2432;
  2434 [type="}"] [value="b'}'"];
  2400 -> 2434;
  2436 [type=")"] [value="b')'"];
  2390 -> 2436;
  2438 [type="decorator"] [value="b"@relay.response(404, 'Relay not found', response_fields)""];
  2252 -> 2438;
  2440 [type="@"] [value="b'@'"];
  2438 -> 2440;
  2442 [type="call"] [value="b"relay.response(404, 'Relay not found', response_fields)""];
  2438 -> 2442;
  2444 [type="attribute"] [value="b'relay.response'"];
  2442 -> 2444;
  2446 [type="identifier"] [value="b'relay'"];
  2444 -> 2446;
  2448 [type="."] [value="b'.'"];
  2444 -> 2448;
  2450 [type="identifier"] [value="b'response'"];
  2444 -> 2450;
  2452 [type="argument_list"] [value="b"(404, 'Relay not found', response_fields)""];
  2442 -> 2452;
  2454 [type="("] [value="b'('"];
  2452 -> 2454;
  2456 [type="integer"] [value="b'404'"];
  2452 -> 2456;
  2458 [type=","] [value="b','"];
  2452 -> 2458;
  2460 [type="string"] [value="b"'Relay not found'""];
  2452 -> 2460;
  2462 [type="string_start"] [value="b"'""];
  2460 -> 2462;
  2464 [type="string_content"] [value="b'Relay not found'"];
  2460 -> 2464;
  2466 [type="string_end"] [value="b"'""];
  2460 -> 2466;
  2468 [type=","] [value="b','"];
  2452 -> 2468;
  2470 [type="identifier"] [value="b'response_fields'"];
  2452 -> 2470;
  2472 [type=")"] [value="b')'"];
  2452 -> 2472;
  2474 [type="decorator"] [value="b"@relay.doc(security='Bearer')""];
  2252 -> 2474;
  2476 [type="@"] [value="b'@'"];
  2474 -> 2476;
  2478 [type="call"] [value="b"relay.doc(security='Bearer')""];
  2474 -> 2478;
  2480 [type="attribute"] [value="b'relay.doc'"];
  2478 -> 2480;
  2482 [type="identifier"] [value="b'relay'"];
  2480 -> 2482;
  2484 [type="."] [value="b'.'"];
  2480 -> 2484;
  2486 [type="identifier"] [value="b'doc'"];
  2480 -> 2486;
  2488 [type="argument_list"] [value="b"(security='Bearer')""];
  2478 -> 2488;
  2490 [type="("] [value="b'('"];
  2488 -> 2490;
  2492 [type="keyword_argument"] [value="b"security='Bearer'""];
  2488 -> 2492;
  2494 [type="identifier"] [value="b'security'"];
  2492 -> 2494;
  2496 [type="="] [value="b'='"];
  2492 -> 2496;
  2498 [type="string"] [value="b"'Bearer'""];
  2492 -> 2498;
  2500 [type="string_start"] [value="b"'""];
  2498 -> 2500;
  2502 [type="string_content"] [value="b'Bearer'"];
  2498 -> 2502;
  2504 [type="string_end"] [value="b"'""];
  2498 -> 2504;
  2506 [type=")"] [value="b')'"];
  2488 -> 2506;
  2508 [type="decorator"] [value="b'@common.api_token_authorization'"];
  2252 -> 2508;
  2510 [type="@"] [value="b'@'"];
  2508 -> 2510;
  2512 [type="attribute"] [value="b'common.api_token_authorization'"];
  2508 -> 2512;
  2514 [type="identifier"] [value="b'common'"];
  2512 -> 2514;
  2516 [type="."] [value="b'.'"];
  2512 -> 2516;
  2518 [type="identifier"] [value="b'api_token_authorization'"];
  2512 -> 2518;
  2520 [type="function_definition"] [value="b'def patch(self, name):\n        """ Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200'"];
  2252 -> 2520;
  2522 [type="def"] [value="b'def'"];
  2520 -> 2522;
  2524 [type="identifier"] [value="b'patch'"];
  2520 -> 2524;
  2526 [type="parameters"] [value="b'(self, name)'"];
  2520 -> 2526;
  2528 [type="("] [value="b'('"];
  2526 -> 2528;
  2530 [type="identifier"] [value="b'self'"];
  2526 -> 2530;
  2532 [type=","] [value="b','"];
  2526 -> 2532;
  2534 [type="identifier"] [value="b'name'"];
  2526 -> 2534;
  2536 [type=")"] [value="b')'"];
  2526 -> 2536;
  2538 [type=":"] [value="b':'"];
  2520 -> 2538;
  2540 [type="block"] [value="b'""" Update the specified relay """\n        data = api.payload\n\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n\n        if \'smtp\' in data:\n            relay_found.smtp = data[\'smtp\']\n        if \'comment\' in data:\n            relay_found.comment = data[\'comment\']\n        db.session.add(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been updated\'}, 200'"];
  2520 -> 2540;
  2542 [type="expression_statement"] [value="b'""" Update the specified relay """'"];
  2540 -> 2542;
  2544 [type="string"] [value="b'""" Update the specified relay """'"];
  2542 -> 2544;
  2546 [type="string_start"] [value="b'"""'"];
  2544 -> 2546;
  2548 [type="string_content"] [value="b' Update the specified relay '"];
  2544 -> 2548;
  2550 [type="string_end"] [value="b'"""'"];
  2544 -> 2550;
  2552 [type="expression_statement"] [value="b'data = api.payload'"];
  2540 -> 2552;
  2554 [type="assignment"] [value="b'data = api.payload'"];
  2552 -> 2554;
  2556 [type="identifier"] [value="b'data'"];
  2554 -> 2556;
  2558 [type="="] [value="b'='"];
  2554 -> 2558;
  2560 [type="attribute"] [value="b'api.payload'"];
  2554 -> 2560;
  2562 [type="identifier"] [value="b'api'"];
  2560 -> 2562;
  2564 [type="."] [value="b'.'"];
  2560 -> 2564;
  2566 [type="identifier"] [value="b'payload'"];
  2560 -> 2566;
  2568 [type="if_statement"] [value="b"if not validators.domain(name):\n            return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  2540 -> 2568;
  2570 [type="if"] [value="b'if'"];
  2568 -> 2570;
  2572 [type="not_operator"] [value="b'not validators.domain(name)'"];
  2568 -> 2572;
  2574 [type="not"] [value="b'not'"];
  2572 -> 2574;
  2576 [type="call"] [value="b'validators.domain(name)'"];
  2572 -> 2576;
  2578 [type="attribute"] [value="b'validators.domain'"];
  2576 -> 2578;
  2580 [type="identifier"] [value="b'validators'"];
  2578 -> 2580;
  2582 [type="."] [value="b'.'"];
  2578 -> 2582;
  2584 [type="identifier"] [value="b'domain'"];
  2578 -> 2584;
  2586 [type="argument_list"] [value="b'(name)'"];
  2576 -> 2586;
  2588 [type="("] [value="b'('"];
  2586 -> 2588;
  2590 [type="identifier"] [value="b'name'"];
  2586 -> 2590;
  2592 [type=")"] [value="b')'"];
  2586 -> 2592;
  2594 [type=":"] [value="b':'"];
  2568 -> 2594;
  2596 [type="block"] [value="b"return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  2568 -> 2596;
  2598 [type="return_statement"] [value="b"return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  2596 -> 2598;
  2600 [type="return"] [value="b'return'"];
  2598 -> 2600;
  2602 [type="expression_list"] [value="b"{ 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  2598 -> 2602;
  2604 [type="dictionary"] [value="b"{ 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}""];
  2602 -> 2604;
  2606 [type="{"] [value="b'{'"];
  2604 -> 2606;
  2608 [type="pair"] [value="b"'code': 400""];
  2604 -> 2608;
  2610 [type="string"] [value="b"'code'""];
  2608 -> 2610;
  2612 [type="string_start"] [value="b"'""];
  2610 -> 2612;
  2614 [type="string_content"] [value="b'code'"];
  2610 -> 2614;
  2616 [type="string_end"] [value="b"'""];
  2610 -> 2616;
  2618 [type=":"] [value="b':'"];
  2608 -> 2618;
  2620 [type="integer"] [value="b'400'"];
  2608 -> 2620;
  2622 [type=","] [value="b','"];
  2604 -> 2622;
  2624 [type="pair"] [value="b"'message': f'Relayed domain {name} is not a valid domain'""];
  2604 -> 2624;
  2626 [type="string"] [value="b"'message'""];
  2624 -> 2626;
  2628 [type="string_start"] [value="b"'""];
  2626 -> 2628;
  2630 [type="string_content"] [value="b'message'"];
  2626 -> 2630;
  2632 [type="string_end"] [value="b"'""];
  2626 -> 2632;
  2634 [type=":"] [value="b':'"];
  2624 -> 2634;
  2636 [type="string"] [value="b"f'Relayed domain {name} is not a valid domain'""];
  2624 -> 2636;
  2638 [type="string_start"] [value="b"f'""];
  2636 -> 2638;
  2640 [type="string_content"] [value="b'Relayed domain '"];
  2636 -> 2640;
  2642 [type="interpolation"] [value="b'{name}'"];
  2636 -> 2642;
  2644 [type="{"] [value="b'{'"];
  2642 -> 2644;
  2646 [type="identifier"] [value="b'name'"];
  2642 -> 2646;
  2648 [type="}"] [value="b'}'"];
  2642 -> 2648;
  2650 [type="string_content"] [value="b' is not a valid domain'"];
  2636 -> 2650;
  2652 [type="string_end"] [value="b"'""];
  2636 -> 2652;
  2654 [type="}"] [value="b'}'"];
  2604 -> 2654;
  2656 [type=","] [value="b','"];
  2602 -> 2656;
  2658 [type="integer"] [value="b'400'"];
  2602 -> 2658;
  2660 [type="expression_statement"] [value="b'relay_found = models.Relay.query.filter_by(name=name).first()'"];
  2540 -> 2660;
  2662 [type="assignment"] [value="b'relay_found = models.Relay.query.filter_by(name=name).first()'"];
  2660 -> 2662;
  2664 [type="identifier"] [value="b'relay_found'"];
  2662 -> 2664;
  2666 [type="="] [value="b'='"];
  2662 -> 2666;
  2668 [type="call"] [value="b'models.Relay.query.filter_by(name=name).first()'"];
  2662 -> 2668;
  2670 [type="attribute"] [value="b'models.Relay.query.filter_by(name=name).first'"];
  2668 -> 2670;
  2672 [type="call"] [value="b'models.Relay.query.filter_by(name=name)'"];
  2670 -> 2672;
  2674 [type="attribute"] [value="b'models.Relay.query.filter_by'"];
  2672 -> 2674;
  2676 [type="attribute"] [value="b'models.Relay.query'"];
  2674 -> 2676;
  2678 [type="attribute"] [value="b'models.Relay'"];
  2676 -> 2678;
  2680 [type="identifier"] [value="b'models'"];
  2678 -> 2680;
  2682 [type="."] [value="b'.'"];
  2678 -> 2682;
  2684 [type="identifier"] [value="b'Relay'"];
  2678 -> 2684;
  2686 [type="."] [value="b'.'"];
  2676 -> 2686;
  2688 [type="identifier"] [value="b'query'"];
  2676 -> 2688;
  2690 [type="."] [value="b'.'"];
  2674 -> 2690;
  2692 [type="identifier"] [value="b'filter_by'"];
  2674 -> 2692;
  2694 [type="argument_list"] [value="b'(name=name)'"];
  2672 -> 2694;
  2696 [type="("] [value="b'('"];
  2694 -> 2696;
  2698 [type="keyword_argument"] [value="b'name=name'"];
  2694 -> 2698;
  2700 [type="identifier"] [value="b'name'"];
  2698 -> 2700;
  2702 [type="="] [value="b'='"];
  2698 -> 2702;
  2704 [type="identifier"] [value="b'name'"];
  2698 -> 2704;
  2706 [type=")"] [value="b')'"];
  2694 -> 2706;
  2708 [type="."] [value="b'.'"];
  2670 -> 2708;
  2710 [type="identifier"] [value="b'first'"];
  2670 -> 2710;
  2712 [type="argument_list"] [value="b'()'"];
  2668 -> 2712;
  2714 [type="("] [value="b'('"];
  2712 -> 2714;
  2716 [type=")"] [value="b')'"];
  2712 -> 2716;
  2718 [type="if_statement"] [value="b"if relay_found is None:\n            return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2540 -> 2718;
  2720 [type="if"] [value="b'if'"];
  2718 -> 2720;
  2722 [type="comparison_operator"] [value="b'relay_found is None'"];
  2718 -> 2722;
  2724 [type="identifier"] [value="b'relay_found'"];
  2722 -> 2724;
  2726 [type="is"] [value="b'is'"];
  2722 -> 2726;
  2728 [type="none"] [value="b'None'"];
  2722 -> 2728;
  2730 [type=":"] [value="b':'"];
  2718 -> 2730;
  2732 [type="block"] [value="b"return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2718 -> 2732;
  2734 [type="return_statement"] [value="b"return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2732 -> 2734;
  2736 [type="return"] [value="b'return'"];
  2734 -> 2736;
  2738 [type="expression_list"] [value="b"{ 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  2734 -> 2738;
  2740 [type="dictionary"] [value="b"{ 'code': 404, 'message': f'Relayed domain {name} cannot be found'}""];
  2738 -> 2740;
  2742 [type="{"] [value="b'{'"];
  2740 -> 2742;
  2744 [type="pair"] [value="b"'code': 404""];
  2740 -> 2744;
  2746 [type="string"] [value="b"'code'""];
  2744 -> 2746;
  2748 [type="string_start"] [value="b"'""];
  2746 -> 2748;
  2750 [type="string_content"] [value="b'code'"];
  2746 -> 2750;
  2752 [type="string_end"] [value="b"'""];
  2746 -> 2752;
  2754 [type=":"] [value="b':'"];
  2744 -> 2754;
  2756 [type="integer"] [value="b'404'"];
  2744 -> 2756;
  2758 [type=","] [value="b','"];
  2740 -> 2758;
  2760 [type="pair"] [value="b"'message': f'Relayed domain {name} cannot be found'""];
  2740 -> 2760;
  2762 [type="string"] [value="b"'message'""];
  2760 -> 2762;
  2764 [type="string_start"] [value="b"'""];
  2762 -> 2764;
  2766 [type="string_content"] [value="b'message'"];
  2762 -> 2766;
  2768 [type="string_end"] [value="b"'""];
  2762 -> 2768;
  2770 [type=":"] [value="b':'"];
  2760 -> 2770;
  2772 [type="string"] [value="b"f'Relayed domain {name} cannot be found'""];
  2760 -> 2772;
  2774 [type="string_start"] [value="b"f'""];
  2772 -> 2774;
  2776 [type="string_content"] [value="b'Relayed domain '"];
  2772 -> 2776;
  2778 [type="interpolation"] [value="b'{name}'"];
  2772 -> 2778;
  2780 [type="{"] [value="b'{'"];
  2778 -> 2780;
  2782 [type="identifier"] [value="b'name'"];
  2778 -> 2782;
  2784 [type="}"] [value="b'}'"];
  2778 -> 2784;
  2786 [type="string_content"] [value="b' cannot be found'"];
  2772 -> 2786;
  2788 [type="string_end"] [value="b"'""];
  2772 -> 2788;
  2790 [type="}"] [value="b'}'"];
  2740 -> 2790;
  2792 [type=","] [value="b','"];
  2738 -> 2792;
  2794 [type="integer"] [value="b'404'"];
  2738 -> 2794;
  2796 [type="if_statement"] [value="b"if 'smtp' in data:\n            relay_found.smtp = data['smtp']""];
  2540 -> 2796;
  2798 [type="if"] [value="b'if'"];
  2796 -> 2798;
  2800 [type="comparison_operator"] [value="b"'smtp' in data""];
  2796 -> 2800;
  2802 [type="string"] [value="b"'smtp'""];
  2800 -> 2802;
  2804 [type="string_start"] [value="b"'""];
  2802 -> 2804;
  2806 [type="string_content"] [value="b'smtp'"];
  2802 -> 2806;
  2808 [type="string_end"] [value="b"'""];
  2802 -> 2808;
  2810 [type="in"] [value="b'in'"];
  2800 -> 2810;
  2812 [type="identifier"] [value="b'data'"];
  2800 -> 2812;
  2814 [type=":"] [value="b':'"];
  2796 -> 2814;
  2816 [type="block"] [value="b"relay_found.smtp = data['smtp']""];
  2796 -> 2816;
  2818 [type="expression_statement"] [value="b"relay_found.smtp = data['smtp']""];
  2816 -> 2818;
  2820 [type="assignment"] [value="b"relay_found.smtp = data['smtp']""];
  2818 -> 2820;
  2822 [type="attribute"] [value="b'relay_found.smtp'"];
  2820 -> 2822;
  2824 [type="identifier"] [value="b'relay_found'"];
  2822 -> 2824;
  2826 [type="."] [value="b'.'"];
  2822 -> 2826;
  2828 [type="identifier"] [value="b'smtp'"];
  2822 -> 2828;
  2830 [type="="] [value="b'='"];
  2820 -> 2830;
  2832 [type="subscript"] [value="b"data['smtp']""];
  2820 -> 2832;
  2834 [type="identifier"] [value="b'data'"];
  2832 -> 2834;
  2836 [type="["] [value="b'['"];
  2832 -> 2836;
  2838 [type="string"] [value="b"'smtp'""];
  2832 -> 2838;
  2840 [type="string_start"] [value="b"'""];
  2838 -> 2840;
  2842 [type="string_content"] [value="b'smtp'"];
  2838 -> 2842;
  2844 [type="string_end"] [value="b"'""];
  2838 -> 2844;
  2846 [type="]"] [value="b']'"];
  2832 -> 2846;
  2848 [type="if_statement"] [value="b"if 'comment' in data:\n            relay_found.comment = data['comment']""];
  2540 -> 2848;
  2850 [type="if"] [value="b'if'"];
  2848 -> 2850;
  2852 [type="comparison_operator"] [value="b"'comment' in data""];
  2848 -> 2852;
  2854 [type="string"] [value="b"'comment'""];
  2852 -> 2854;
  2856 [type="string_start"] [value="b"'""];
  2854 -> 2856;
  2858 [type="string_content"] [value="b'comment'"];
  2854 -> 2858;
  2860 [type="string_end"] [value="b"'""];
  2854 -> 2860;
  2862 [type="in"] [value="b'in'"];
  2852 -> 2862;
  2864 [type="identifier"] [value="b'data'"];
  2852 -> 2864;
  2866 [type=":"] [value="b':'"];
  2848 -> 2866;
  2868 [type="block"] [value="b"relay_found.comment = data['comment']""];
  2848 -> 2868;
  2870 [type="expression_statement"] [value="b"relay_found.comment = data['comment']""];
  2868 -> 2870;
  2872 [type="assignment"] [value="b"relay_found.comment = data['comment']""];
  2870 -> 2872;
  2874 [type="attribute"] [value="b'relay_found.comment'"];
  2872 -> 2874;
  2876 [type="identifier"] [value="b'relay_found'"];
  2874 -> 2876;
  2878 [type="."] [value="b'.'"];
  2874 -> 2878;
  2880 [type="identifier"] [value="b'comment'"];
  2874 -> 2880;
  2882 [type="="] [value="b'='"];
  2872 -> 2882;
  2884 [type="subscript"] [value="b"data['comment']""];
  2872 -> 2884;
  2886 [type="identifier"] [value="b'data'"];
  2884 -> 2886;
  2888 [type="["] [value="b'['"];
  2884 -> 2888;
  2890 [type="string"] [value="b"'comment'""];
  2884 -> 2890;
  2892 [type="string_start"] [value="b"'""];
  2890 -> 2892;
  2894 [type="string_content"] [value="b'comment'"];
  2890 -> 2894;
  2896 [type="string_end"] [value="b"'""];
  2890 -> 2896;
  2898 [type="]"] [value="b']'"];
  2884 -> 2898;
  2900 [type="expression_statement"] [value="b'db.session.add(relay_found)'"];
  2540 -> 2900;
  2902 [type="call"] [value="b'db.session.add(relay_found)'"];
  2900 -> 2902;
  2904 [type="attribute"] [value="b'db.session.add'"];
  2902 -> 2904;
  2906 [type="attribute"] [value="b'db.session'"];
  2904 -> 2906;
  2908 [type="identifier"] [value="b'db'"];
  2906 -> 2908;
  2910 [type="."] [value="b'.'"];
  2906 -> 2910;
  2912 [type="identifier"] [value="b'session'"];
  2906 -> 2912;
  2914 [type="."] [value="b'.'"];
  2904 -> 2914;
  2916 [type="identifier"] [value="b'add'"];
  2904 -> 2916;
  2918 [type="argument_list"] [value="b'(relay_found)'"];
  2902 -> 2918;
  2920 [type="("] [value="b'('"];
  2918 -> 2920;
  2922 [type="identifier"] [value="b'relay_found'"];
  2918 -> 2922;
  2924 [type=")"] [value="b')'"];
  2918 -> 2924;
  2926 [type="expression_statement"] [value="b'db.session.commit()'"];
  2540 -> 2926;
  2928 [type="call"] [value="b'db.session.commit()'"];
  2926 -> 2928;
  2930 [type="attribute"] [value="b'db.session.commit'"];
  2928 -> 2930;
  2932 [type="attribute"] [value="b'db.session'"];
  2930 -> 2932;
  2934 [type="identifier"] [value="b'db'"];
  2932 -> 2934;
  2936 [type="."] [value="b'.'"];
  2932 -> 2936;
  2938 [type="identifier"] [value="b'session'"];
  2932 -> 2938;
  2940 [type="."] [value="b'.'"];
  2930 -> 2940;
  2942 [type="identifier"] [value="b'commit'"];
  2930 -> 2942;
  2944 [type="argument_list"] [value="b'()'"];
  2928 -> 2944;
  2946 [type="("] [value="b'('"];
  2944 -> 2946;
  2948 [type=")"] [value="b')'"];
  2944 -> 2948;
  2950 [type="return_statement"] [value="b"return { 'code': 200, 'message': f'Relayed domain {name} has been updated'}, 200""];
  2540 -> 2950;
  2952 [type="return"] [value="b'return'"];
  2950 -> 2952;
  2954 [type="expression_list"] [value="b"{ 'code': 200, 'message': f'Relayed domain {name} has been updated'}, 200""];
  2950 -> 2954;
  2956 [type="dictionary"] [value="b"{ 'code': 200, 'message': f'Relayed domain {name} has been updated'}""];
  2954 -> 2956;
  2958 [type="{"] [value="b'{'"];
  2956 -> 2958;
  2960 [type="pair"] [value="b"'code': 200""];
  2956 -> 2960;
  2962 [type="string"] [value="b"'code'""];
  2960 -> 2962;
  2964 [type="string_start"] [value="b"'""];
  2962 -> 2964;
  2966 [type="string_content"] [value="b'code'"];
  2962 -> 2966;
  2968 [type="string_end"] [value="b"'""];
  2962 -> 2968;
  2970 [type=":"] [value="b':'"];
  2960 -> 2970;
  2972 [type="integer"] [value="b'200'"];
  2960 -> 2972;
  2974 [type=","] [value="b','"];
  2956 -> 2974;
  2976 [type="pair"] [value="b"'message': f'Relayed domain {name} has been updated'""];
  2956 -> 2976;
  2978 [type="string"] [value="b"'message'""];
  2976 -> 2978;
  2980 [type="string_start"] [value="b"'""];
  2978 -> 2980;
  2982 [type="string_content"] [value="b'message'"];
  2978 -> 2982;
  2984 [type="string_end"] [value="b"'""];
  2978 -> 2984;
  2986 [type=":"] [value="b':'"];
  2976 -> 2986;
  2988 [type="string"] [value="b"f'Relayed domain {name} has been updated'""];
  2976 -> 2988;
  2990 [type="string_start"] [value="b"f'""];
  2988 -> 2990;
  2992 [type="string_content"] [value="b'Relayed domain '"];
  2988 -> 2992;
  2994 [type="interpolation"] [value="b'{name}'"];
  2988 -> 2994;
  2996 [type="{"] [value="b'{'"];
  2994 -> 2996;
  2998 [type="identifier"] [value="b'name'"];
  2994 -> 2998;
  3000 [type="}"] [value="b'}'"];
  2994 -> 3000;
  3002 [type="string_content"] [value="b' has been updated'"];
  2988 -> 3002;
  3004 [type="string_end"] [value="b"'""];
  2988 -> 3004;
  3006 [type="}"] [value="b'}'"];
  2956 -> 3006;
  3008 [type=","] [value="b','"];
  2954 -> 3008;
  3010 [type="integer"] [value="b'200'"];
  2954 -> 3010;
  3012 [type="decorated_definition"] [value="b'@relay.doc(\'delete_relay\')\n    @relay.response(200, \'Success\', response_fields)\n    @relay.response(400, \'Input validation exception\', response_fields)\n    @relay.doc(responses={401: \'Authorization header missing\', 403: \'Invalid authorization header\'})\n    @relay.response(404, \'Relay not found\', response_fields)\n    @relay.doc(security=\'Bearer\')\n    @common.api_token_authorization\n    def delete(self, name):\n        """ Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200'"];
  1718 -> 3012;
  3014 [type="decorator"] [value="b"@relay.doc('delete_relay')""];
  3012 -> 3014;
  3016 [type="@"] [value="b'@'"];
  3014 -> 3016;
  3018 [type="call"] [value="b"relay.doc('delete_relay')""];
  3014 -> 3018;
  3020 [type="attribute"] [value="b'relay.doc'"];
  3018 -> 3020;
  3022 [type="identifier"] [value="b'relay'"];
  3020 -> 3022;
  3024 [type="."] [value="b'.'"];
  3020 -> 3024;
  3026 [type="identifier"] [value="b'doc'"];
  3020 -> 3026;
  3028 [type="argument_list"] [value="b"('delete_relay')""];
  3018 -> 3028;
  3030 [type="("] [value="b'('"];
  3028 -> 3030;
  3032 [type="string"] [value="b"'delete_relay'""];
  3028 -> 3032;
  3034 [type="string_start"] [value="b"'""];
  3032 -> 3034;
  3036 [type="string_content"] [value="b'delete_relay'"];
  3032 -> 3036;
  3038 [type="string_end"] [value="b"'""];
  3032 -> 3038;
  3040 [type=")"] [value="b')'"];
  3028 -> 3040;
  3042 [type="decorator"] [value="b"@relay.response(200, 'Success', response_fields)""];
  3012 -> 3042;
  3044 [type="@"] [value="b'@'"];
  3042 -> 3044;
  3046 [type="call"] [value="b"relay.response(200, 'Success', response_fields)""];
  3042 -> 3046;
  3048 [type="attribute"] [value="b'relay.response'"];
  3046 -> 3048;
  3050 [type="identifier"] [value="b'relay'"];
  3048 -> 3050;
  3052 [type="."] [value="b'.'"];
  3048 -> 3052;
  3054 [type="identifier"] [value="b'response'"];
  3048 -> 3054;
  3056 [type="argument_list"] [value="b"(200, 'Success', response_fields)""];
  3046 -> 3056;
  3058 [type="("] [value="b'('"];
  3056 -> 3058;
  3060 [type="integer"] [value="b'200'"];
  3056 -> 3060;
  3062 [type=","] [value="b','"];
  3056 -> 3062;
  3064 [type="string"] [value="b"'Success'""];
  3056 -> 3064;
  3066 [type="string_start"] [value="b"'""];
  3064 -> 3066;
  3068 [type="string_content"] [value="b'Success'"];
  3064 -> 3068;
  3070 [type="string_end"] [value="b"'""];
  3064 -> 3070;
  3072 [type=","] [value="b','"];
  3056 -> 3072;
  3074 [type="identifier"] [value="b'response_fields'"];
  3056 -> 3074;
  3076 [type=")"] [value="b')'"];
  3056 -> 3076;
  3078 [type="decorator"] [value="b"@relay.response(400, 'Input validation exception', response_fields)""];
  3012 -> 3078;
  3080 [type="@"] [value="b'@'"];
  3078 -> 3080;
  3082 [type="call"] [value="b"relay.response(400, 'Input validation exception', response_fields)""];
  3078 -> 3082;
  3084 [type="attribute"] [value="b'relay.response'"];
  3082 -> 3084;
  3086 [type="identifier"] [value="b'relay'"];
  3084 -> 3086;
  3088 [type="."] [value="b'.'"];
  3084 -> 3088;
  3090 [type="identifier"] [value="b'response'"];
  3084 -> 3090;
  3092 [type="argument_list"] [value="b"(400, 'Input validation exception', response_fields)""];
  3082 -> 3092;
  3094 [type="("] [value="b'('"];
  3092 -> 3094;
  3096 [type="integer"] [value="b'400'"];
  3092 -> 3096;
  3098 [type=","] [value="b','"];
  3092 -> 3098;
  3100 [type="string"] [value="b"'Input validation exception'""];
  3092 -> 3100;
  3102 [type="string_start"] [value="b"'""];
  3100 -> 3102;
  3104 [type="string_content"] [value="b'Input validation exception'"];
  3100 -> 3104;
  3106 [type="string_end"] [value="b"'""];
  3100 -> 3106;
  3108 [type=","] [value="b','"];
  3092 -> 3108;
  3110 [type="identifier"] [value="b'response_fields'"];
  3092 -> 3110;
  3112 [type=")"] [value="b')'"];
  3092 -> 3112;
  3114 [type="decorator"] [value="b"@relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  3012 -> 3114;
  3116 [type="@"] [value="b'@'"];
  3114 -> 3116;
  3118 [type="call"] [value="b"relay.doc(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  3114 -> 3118;
  3120 [type="attribute"] [value="b'relay.doc'"];
  3118 -> 3120;
  3122 [type="identifier"] [value="b'relay'"];
  3120 -> 3122;
  3124 [type="."] [value="b'.'"];
  3120 -> 3124;
  3126 [type="identifier"] [value="b'doc'"];
  3120 -> 3126;
  3128 [type="argument_list"] [value="b"(responses={401: 'Authorization header missing', 403: 'Invalid authorization header'})""];
  3118 -> 3128;
  3130 [type="("] [value="b'('"];
  3128 -> 3130;
  3132 [type="keyword_argument"] [value="b"responses={401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  3128 -> 3132;
  3134 [type="identifier"] [value="b'responses'"];
  3132 -> 3134;
  3136 [type="="] [value="b'='"];
  3132 -> 3136;
  3138 [type="dictionary"] [value="b"{401: 'Authorization header missing', 403: 'Invalid authorization header'}""];
  3132 -> 3138;
  3140 [type="{"] [value="b'{'"];
  3138 -> 3140;
  3142 [type="pair"] [value="b"401: 'Authorization header missing'""];
  3138 -> 3142;
  3144 [type="integer"] [value="b'401'"];
  3142 -> 3144;
  3146 [type=":"] [value="b':'"];
  3142 -> 3146;
  3148 [type="string"] [value="b"'Authorization header missing'""];
  3142 -> 3148;
  3150 [type="string_start"] [value="b"'""];
  3148 -> 3150;
  3152 [type="string_content"] [value="b'Authorization header missing'"];
  3148 -> 3152;
  3154 [type="string_end"] [value="b"'""];
  3148 -> 3154;
  3156 [type=","] [value="b','"];
  3138 -> 3156;
  3158 [type="pair"] [value="b"403: 'Invalid authorization header'""];
  3138 -> 3158;
  3160 [type="integer"] [value="b'403'"];
  3158 -> 3160;
  3162 [type=":"] [value="b':'"];
  3158 -> 3162;
  3164 [type="string"] [value="b"'Invalid authorization header'""];
  3158 -> 3164;
  3166 [type="string_start"] [value="b"'""];
  3164 -> 3166;
  3168 [type="string_content"] [value="b'Invalid authorization header'"];
  3164 -> 3168;
  3170 [type="string_end"] [value="b"'""];
  3164 -> 3170;
  3172 [type="}"] [value="b'}'"];
  3138 -> 3172;
  3174 [type=")"] [value="b')'"];
  3128 -> 3174;
  3176 [type="decorator"] [value="b"@relay.response(404, 'Relay not found', response_fields)""];
  3012 -> 3176;
  3178 [type="@"] [value="b'@'"];
  3176 -> 3178;
  3180 [type="call"] [value="b"relay.response(404, 'Relay not found', response_fields)""];
  3176 -> 3180;
  3182 [type="attribute"] [value="b'relay.response'"];
  3180 -> 3182;
  3184 [type="identifier"] [value="b'relay'"];
  3182 -> 3184;
  3186 [type="."] [value="b'.'"];
  3182 -> 3186;
  3188 [type="identifier"] [value="b'response'"];
  3182 -> 3188;
  3190 [type="argument_list"] [value="b"(404, 'Relay not found', response_fields)""];
  3180 -> 3190;
  3192 [type="("] [value="b'('"];
  3190 -> 3192;
  3194 [type="integer"] [value="b'404'"];
  3190 -> 3194;
  3196 [type=","] [value="b','"];
  3190 -> 3196;
  3198 [type="string"] [value="b"'Relay not found'""];
  3190 -> 3198;
  3200 [type="string_start"] [value="b"'""];
  3198 -> 3200;
  3202 [type="string_content"] [value="b'Relay not found'"];
  3198 -> 3202;
  3204 [type="string_end"] [value="b"'""];
  3198 -> 3204;
  3206 [type=","] [value="b','"];
  3190 -> 3206;
  3208 [type="identifier"] [value="b'response_fields'"];
  3190 -> 3208;
  3210 [type=")"] [value="b')'"];
  3190 -> 3210;
  3212 [type="decorator"] [value="b"@relay.doc(security='Bearer')""];
  3012 -> 3212;
  3214 [type="@"] [value="b'@'"];
  3212 -> 3214;
  3216 [type="call"] [value="b"relay.doc(security='Bearer')""];
  3212 -> 3216;
  3218 [type="attribute"] [value="b'relay.doc'"];
  3216 -> 3218;
  3220 [type="identifier"] [value="b'relay'"];
  3218 -> 3220;
  3222 [type="."] [value="b'.'"];
  3218 -> 3222;
  3224 [type="identifier"] [value="b'doc'"];
  3218 -> 3224;
  3226 [type="argument_list"] [value="b"(security='Bearer')""];
  3216 -> 3226;
  3228 [type="("] [value="b'('"];
  3226 -> 3228;
  3230 [type="keyword_argument"] [value="b"security='Bearer'""];
  3226 -> 3230;
  3232 [type="identifier"] [value="b'security'"];
  3230 -> 3232;
  3234 [type="="] [value="b'='"];
  3230 -> 3234;
  3236 [type="string"] [value="b"'Bearer'""];
  3230 -> 3236;
  3238 [type="string_start"] [value="b"'""];
  3236 -> 3238;
  3240 [type="string_content"] [value="b'Bearer'"];
  3236 -> 3240;
  3242 [type="string_end"] [value="b"'""];
  3236 -> 3242;
  3244 [type=")"] [value="b')'"];
  3226 -> 3244;
  3246 [type="decorator"] [value="b'@common.api_token_authorization'"];
  3012 -> 3246;
  3248 [type="@"] [value="b'@'"];
  3246 -> 3248;
  3250 [type="attribute"] [value="b'common.api_token_authorization'"];
  3246 -> 3250;
  3252 [type="identifier"] [value="b'common'"];
  3250 -> 3252;
  3254 [type="."] [value="b'.'"];
  3250 -> 3254;
  3256 [type="identifier"] [value="b'api_token_authorization'"];
  3250 -> 3256;
  3258 [type="function_definition"] [value="b'def delete(self, name):\n        """ Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200'"];
  3012 -> 3258;
  3260 [type="def"] [value="b'def'"];
  3258 -> 3260;
  3262 [type="identifier"] [value="b'delete'"];
  3258 -> 3262;
  3264 [type="parameters"] [value="b'(self, name)'"];
  3258 -> 3264;
  3266 [type="("] [value="b'('"];
  3264 -> 3266;
  3268 [type="identifier"] [value="b'self'"];
  3264 -> 3268;
  3270 [type=","] [value="b','"];
  3264 -> 3270;
  3272 [type="identifier"] [value="b'name'"];
  3264 -> 3272;
  3274 [type=")"] [value="b')'"];
  3264 -> 3274;
  3276 [type=":"] [value="b':'"];
  3258 -> 3276;
  3278 [type="block"] [value="b'""" Delete the specified relay """\n        if not validators.domain(name):\n            return { \'code\': 400, \'message\': f\'Relayed domain {name} is not a valid domain\'}, 400\n        relay_found = models.Relay.query.filter_by(name=name).first()\n        if relay_found is None:\n            return { \'code\': 404, \'message\': f\'Relayed domain {name} cannot be found\'}, 404\n        db.session.delete(relay_found)\n        db.session.commit()\n        return { \'code\': 200, \'message\': f\'Relayed domain {name} has been deleted\'}, 200'"];
  3258 -> 3278;
  3280 [type="expression_statement"] [value="b'""" Delete the specified relay """'"];
  3278 -> 3280;
  3282 [type="string"] [value="b'""" Delete the specified relay """'"];
  3280 -> 3282;
  3284 [type="string_start"] [value="b'"""'"];
  3282 -> 3284;
  3286 [type="string_content"] [value="b' Delete the specified relay '"];
  3282 -> 3286;
  3288 [type="string_end"] [value="b'"""'"];
  3282 -> 3288;
  3290 [type="if_statement"] [value="b"if not validators.domain(name):\n            return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  3278 -> 3290;
  3292 [type="if"] [value="b'if'"];
  3290 -> 3292;
  3294 [type="not_operator"] [value="b'not validators.domain(name)'"];
  3290 -> 3294;
  3296 [type="not"] [value="b'not'"];
  3294 -> 3296;
  3298 [type="call"] [value="b'validators.domain(name)'"];
  3294 -> 3298;
  3300 [type="attribute"] [value="b'validators.domain'"];
  3298 -> 3300;
  3302 [type="identifier"] [value="b'validators'"];
  3300 -> 3302;
  3304 [type="."] [value="b'.'"];
  3300 -> 3304;
  3306 [type="identifier"] [value="b'domain'"];
  3300 -> 3306;
  3308 [type="argument_list"] [value="b'(name)'"];
  3298 -> 3308;
  3310 [type="("] [value="b'('"];
  3308 -> 3310;
  3312 [type="identifier"] [value="b'name'"];
  3308 -> 3312;
  3314 [type=")"] [value="b')'"];
  3308 -> 3314;
  3316 [type=":"] [value="b':'"];
  3290 -> 3316;
  3318 [type="block"] [value="b"return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  3290 -> 3318;
  3320 [type="return_statement"] [value="b"return { 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  3318 -> 3320;
  3322 [type="return"] [value="b'return'"];
  3320 -> 3322;
  3324 [type="expression_list"] [value="b"{ 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}, 400""];
  3320 -> 3324;
  3326 [type="dictionary"] [value="b"{ 'code': 400, 'message': f'Relayed domain {name} is not a valid domain'}""];
  3324 -> 3326;
  3328 [type="{"] [value="b'{'"];
  3326 -> 3328;
  3330 [type="pair"] [value="b"'code': 400""];
  3326 -> 3330;
  3332 [type="string"] [value="b"'code'""];
  3330 -> 3332;
  3334 [type="string_start"] [value="b"'""];
  3332 -> 3334;
  3336 [type="string_content"] [value="b'code'"];
  3332 -> 3336;
  3338 [type="string_end"] [value="b"'""];
  3332 -> 3338;
  3340 [type=":"] [value="b':'"];
  3330 -> 3340;
  3342 [type="integer"] [value="b'400'"];
  3330 -> 3342;
  3344 [type=","] [value="b','"];
  3326 -> 3344;
  3346 [type="pair"] [value="b"'message': f'Relayed domain {name} is not a valid domain'""];
  3326 -> 3346;
  3348 [type="string"] [value="b"'message'""];
  3346 -> 3348;
  3350 [type="string_start"] [value="b"'""];
  3348 -> 3350;
  3352 [type="string_content"] [value="b'message'"];
  3348 -> 3352;
  3354 [type="string_end"] [value="b"'""];
  3348 -> 3354;
  3356 [type=":"] [value="b':'"];
  3346 -> 3356;
  3358 [type="string"] [value="b"f'Relayed domain {name} is not a valid domain'""];
  3346 -> 3358;
  3360 [type="string_start"] [value="b"f'""];
  3358 -> 3360;
  3362 [type="string_content"] [value="b'Relayed domain '"];
  3358 -> 3362;
  3364 [type="interpolation"] [value="b'{name}'"];
  3358 -> 3364;
  3366 [type="{"] [value="b'{'"];
  3364 -> 3366;
  3368 [type="identifier"] [value="b'name'"];
  3364 -> 3368;
  3370 [type="}"] [value="b'}'"];
  3364 -> 3370;
  3372 [type="string_content"] [value="b' is not a valid domain'"];
  3358 -> 3372;
  3374 [type="string_end"] [value="b"'""];
  3358 -> 3374;
  3376 [type="}"] [value="b'}'"];
  3326 -> 3376;
  3378 [type=","] [value="b','"];
  3324 -> 3378;
  3380 [type="integer"] [value="b'400'"];
  3324 -> 3380;
  3382 [type="expression_statement"] [value="b'relay_found = models.Relay.query.filter_by(name=name).first()'"];
  3278 -> 3382;
  3384 [type="assignment"] [value="b'relay_found = models.Relay.query.filter_by(name=name).first()'"];
  3382 -> 3384;
  3386 [type="identifier"] [value="b'relay_found'"];
  3384 -> 3386;
  3388 [type="="] [value="b'='"];
  3384 -> 3388;
  3390 [type="call"] [value="b'models.Relay.query.filter_by(name=name).first()'"];
  3384 -> 3390;
  3392 [type="attribute"] [value="b'models.Relay.query.filter_by(name=name).first'"];
  3390 -> 3392;
  3394 [type="call"] [value="b'models.Relay.query.filter_by(name=name)'"];
  3392 -> 3394;
  3396 [type="attribute"] [value="b'models.Relay.query.filter_by'"];
  3394 -> 3396;
  3398 [type="attribute"] [value="b'models.Relay.query'"];
  3396 -> 3398;
  3400 [type="attribute"] [value="b'models.Relay'"];
  3398 -> 3400;
  3402 [type="identifier"] [value="b'models'"];
  3400 -> 3402;
  3404 [type="."] [value="b'.'"];
  3400 -> 3404;
  3406 [type="identifier"] [value="b'Relay'"];
  3400 -> 3406;
  3408 [type="."] [value="b'.'"];
  3398 -> 3408;
  3410 [type="identifier"] [value="b'query'"];
  3398 -> 3410;
  3412 [type="."] [value="b'.'"];
  3396 -> 3412;
  3414 [type="identifier"] [value="b'filter_by'"];
  3396 -> 3414;
  3416 [type="argument_list"] [value="b'(name=name)'"];
  3394 -> 3416;
  3418 [type="("] [value="b'('"];
  3416 -> 3418;
  3420 [type="keyword_argument"] [value="b'name=name'"];
  3416 -> 3420;
  3422 [type="identifier"] [value="b'name'"];
  3420 -> 3422;
  3424 [type="="] [value="b'='"];
  3420 -> 3424;
  3426 [type="identifier"] [value="b'name'"];
  3420 -> 3426;
  3428 [type=")"] [value="b')'"];
  3416 -> 3428;
  3430 [type="."] [value="b'.'"];
  3392 -> 3430;
  3432 [type="identifier"] [value="b'first'"];
  3392 -> 3432;
  3434 [type="argument_list"] [value="b'()'"];
  3390 -> 3434;
  3436 [type="("] [value="b'('"];
  3434 -> 3436;
  3438 [type=")"] [value="b')'"];
  3434 -> 3438;
  3440 [type="if_statement"] [value="b"if relay_found is None:\n            return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  3278 -> 3440;
  3442 [type="if"] [value="b'if'"];
  3440 -> 3442;
  3444 [type="comparison_operator"] [value="b'relay_found is None'"];
  3440 -> 3444;
  3446 [type="identifier"] [value="b'relay_found'"];
  3444 -> 3446;
  3448 [type="is"] [value="b'is'"];
  3444 -> 3448;
  3450 [type="none"] [value="b'None'"];
  3444 -> 3450;
  3452 [type=":"] [value="b':'"];
  3440 -> 3452;
  3454 [type="block"] [value="b"return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  3440 -> 3454;
  3456 [type="return_statement"] [value="b"return { 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  3454 -> 3456;
  3458 [type="return"] [value="b'return'"];
  3456 -> 3458;
  3460 [type="expression_list"] [value="b"{ 'code': 404, 'message': f'Relayed domain {name} cannot be found'}, 404""];
  3456 -> 3460;
  3462 [type="dictionary"] [value="b"{ 'code': 404, 'message': f'Relayed domain {name} cannot be found'}""];
  3460 -> 3462;
  3464 [type="{"] [value="b'{'"];
  3462 -> 3464;
  3466 [type="pair"] [value="b"'code': 404""];
  3462 -> 3466;
  3468 [type="string"] [value="b"'code'""];
  3466 -> 3468;
  3470 [type="string_start"] [value="b"'""];
  3468 -> 3470;
  3472 [type="string_content"] [value="b'code'"];
  3468 -> 3472;
  3474 [type="string_end"] [value="b"'""];
  3468 -> 3474;
  3476 [type=":"] [value="b':'"];
  3466 -> 3476;
  3478 [type="integer"] [value="b'404'"];
  3466 -> 3478;
  3480 [type=","] [value="b','"];
  3462 -> 3480;
  3482 [type="pair"] [value="b"'message': f'Relayed domain {name} cannot be found'""];
  3462 -> 3482;
  3484 [type="string"] [value="b"'message'""];
  3482 -> 3484;
  3486 [type="string_start"] [value="b"'""];
  3484 -> 3486;
  3488 [type="string_content"] [value="b'message'"];
  3484 -> 3488;
  3490 [type="string_end"] [value="b"'""];
  3484 -> 3490;
  3492 [type=":"] [value="b':'"];
  3482 -> 3492;
  3494 [type="string"] [value="b"f'Relayed domain {name} cannot be found'""];
  3482 -> 3494;
  3496 [type="string_start"] [value="b"f'""];
  3494 -> 3496;
  3498 [type="string_content"] [value="b'Relayed domain '"];
  3494 -> 3498;
  3500 [type="interpolation"] [value="b'{name}'"];
  3494 -> 3500;
  3502 [type="{"] [value="b'{'"];
  3500 -> 3502;
  3504 [type="identifier"] [value="b'name'"];
  3500 -> 3504;
  3506 [type="}"] [value="b'}'"];
  3500 -> 3506;
  3508 [type="string_content"] [value="b' cannot be found'"];
  3494 -> 3508;
  3510 [type="string_end"] [value="b"'""];
  3494 -> 3510;
  3512 [type="}"] [value="b'}'"];
  3462 -> 3512;
  3514 [type=","] [value="b','"];
  3460 -> 3514;
  3516 [type="integer"] [value="b'404'"];
  3460 -> 3516;
  3518 [type="expression_statement"] [value="b'db.session.delete(relay_found)'"];
  3278 -> 3518;
  3520 [type="call"] [value="b'db.session.delete(relay_found)'"];
  3518 -> 3520;
  3522 [type="attribute"] [value="b'db.session.delete'"];
  3520 -> 3522;
  3524 [type="attribute"] [value="b'db.session'"];
  3522 -> 3524;
  3526 [type="identifier"] [value="b'db'"];
  3524 -> 3526;
  3528 [type="."] [value="b'.'"];
  3524 -> 3528;
  3530 [type="identifier"] [value="b'session'"];
  3524 -> 3530;
  3532 [type="."] [value="b'.'"];
  3522 -> 3532;
  3534 [type="identifier"] [value="b'delete'"];
  3522 -> 3534;
  3536 [type="argument_list"] [value="b'(relay_found)'"];
  3520 -> 3536;
  3538 [type="("] [value="b'('"];
  3536 -> 3538;
  3540 [type="identifier"] [value="b'relay_found'"];
  3536 -> 3540;
  3542 [type=")"] [value="b')'"];
  3536 -> 3542;
  3544 [type="expression_statement"] [value="b'db.session.commit()'"];
  3278 -> 3544;
  3546 [type="call"] [value="b'db.session.commit()'"];
  3544 -> 3546;
  3548 [type="attribute"] [value="b'db.session.commit'"];
  3546 -> 3548;
  3550 [type="attribute"] [value="b'db.session'"];
  3548 -> 3550;
  3552 [type="identifier"] [value="b'db'"];
  3550 -> 3552;
  3554 [type="."] [value="b'.'"];
  3550 -> 3554;
  3556 [type="identifier"] [value="b'session'"];
  3550 -> 3556;
  3558 [type="."] [value="b'.'"];
  3548 -> 3558;
  3560 [type="identifier"] [value="b'commit'"];
  3548 -> 3560;
  3562 [type="argument_list"] [value="b'()'"];
  3546 -> 3562;
  3564 [type="("] [value="b'('"];
  3562 -> 3564;
  3566 [type=")"] [value="b')'"];
  3562 -> 3566;
  3568 [type="return_statement"] [value="b"return { 'code': 200, 'message': f'Relayed domain {name} has been deleted'}, 200""];
  3278 -> 3568;
  3570 [type="return"] [value="b'return'"];
  3568 -> 3570;
  3572 [type="expression_list"] [value="b"{ 'code': 200, 'message': f'Relayed domain {name} has been deleted'}, 200""];
  3568 -> 3572;
  3574 [type="dictionary"] [value="b"{ 'code': 200, 'message': f'Relayed domain {name} has been deleted'}""];
  3572 -> 3574;
  3576 [type="{"] [value="b'{'"];
  3574 -> 3576;
  3578 [type="pair"] [value="b"'code': 200""];
  3574 -> 3578;
  3580 [type="string"] [value="b"'code'""];
  3578 -> 3580;
  3582 [type="string_start"] [value="b"'""];
  3580 -> 3582;
  3584 [type="string_content"] [value="b'code'"];
  3580 -> 3584;
  3586 [type="string_end"] [value="b"'""];
  3580 -> 3586;
  3588 [type=":"] [value="b':'"];
  3578 -> 3588;
  3590 [type="integer"] [value="b'200'"];
  3578 -> 3590;
  3592 [type=","] [value="b','"];
  3574 -> 3592;
  3594 [type="pair"] [value="b"'message': f'Relayed domain {name} has been deleted'""];
  3574 -> 3594;
  3596 [type="string"] [value="b"'message'""];
  3594 -> 3596;
  3598 [type="string_start"] [value="b"'""];
  3596 -> 3598;
  3600 [type="string_content"] [value="b'message'"];
  3596 -> 3600;
  3602 [type="string_end"] [value="b"'""];
  3596 -> 3602;
  3604 [type=":"] [value="b':'"];
  3594 -> 3604;
  3606 [type="string"] [value="b"f'Relayed domain {name} has been deleted'""];
  3594 -> 3606;
  3608 [type="string_start"] [value="b"f'""];
  3606 -> 3608;
  3610 [type="string_content"] [value="b'Relayed domain '"];
  3606 -> 3610;
  3612 [type="interpolation"] [value="b'{name}'"];
  3606 -> 3612;
  3614 [type="{"] [value="b'{'"];
  3612 -> 3614;
  3616 [type="identifier"] [value="b'name'"];
  3612 -> 3616;
  3618 [type="}"] [value="b'}'"];
  3612 -> 3618;
  3620 [type="string_content"] [value="b' has been deleted'"];
  3606 -> 3620;
  3622 [type="string_end"] [value="b"'""];
  3606 -> 3622;
  3624 [type="}"] [value="b'}'"];
  3574 -> 3624;
  3626 [type=","] [value="b','"];
  3572 -> 3626;
  3628 [type="integer"] [value="b'200'"];
  3572 -> 3628;
}